/*
 * Copyright 2019 TWO SIGMA OPEN SOURCE, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import lunr from 'lunr'

window.mdocSearchData = [
    // eslint-disable-next-line
    ["@@index@@","","Index","","mdoc  is a system to generate user facing documentation from markup files (markdown only at the moment). Documentation files are located next to your product codebase and are part of your product\u0027s SDLC. mdoc  provides directives to simplify your day-to-day documentation process as well as to improve maintenance in a long run. Continue reading to learn more about rationale structuring your documentation leveraging existing code snippets and test results diagrams support UI documentation techniques presentation mode extremely fast navigation local search with auto preview If you are reading this documentation for the first time, I suggest to read in the intended order (there is a next button at the bottom of each page). Feel free to use Table Of Contents on the left, or search (top right) otherwise."],["introduction@@rationale@@stale-documentation","Introduction","Rationale","Stale Documentation","Keeping documentation up to date is a hard task. The further documentation is from the code the more likely it won\u0027t be updated when a feature is added or changed. Depending on your product and clients, stale documentation effects are:  Users\u0027 time lost  Reputation damage"],["introduction@@rationale@@part-of-workflow","Introduction","Rationale","Part Of Workflow","As part of your code review today, you check that: No design violations are committed No subtle bugs are introduced All tests are updated Now, it is time to add to your list: Documentation is updated"],["introduction@@rationale@@maintenance","Introduction","Rationale","Maintenance","Keeping documentation up to date takes time. Even non-functional changes may require documentation update. Here are some activities that most likely put your documentation out of sync: Moving UI elements around Re-naming REST response fields Removing redundant command line parameters Renaming public API classes Our code base already contains a vast amount of data. Instead of requiring that you copy-and-paste, we leverage already-existing artifacts. Examples of how to use API (part of code) Config files Test results Web UI REST CLI Business logic"],["introduction@@rationale@@familiar-approach","Introduction","Rationale","Familiar Approach","Markup is everywhere StackOverflow GitHub Jupyter Reddit Discourse Markup-based documentation is widely used as well Open source projects (ReactJS, Pandas, Spark) Technical books (O\u0027Reilly, Manning) Big companies (Google, FaceBook)"],["introduction@@rationale@@presentations","Introduction","Rationale","Presentations","Mdoc builds presentations to: Show new features Teach a class from your documentation Like all documentation, maintaining presentations takes effort. Instead of building separate slides and trying to keep them up to date, this system automatically generates slides from your documentation content."],["introduction@@example@@markdown","Introduction","Example","Markdown","MDoc uses Markdown, a markup language that uses ASCII to represent styles and page structure."],["introduction@@example@@external-references","Introduction","Example","External References","Example of how to keep your documentation up to date by referencing existing resource. # Server Configuration\n\n:include-file: config/server.config\n Note:  Ths  include-file  macro is a  mdoc  extension and not part of a standard Markdown syntax."],["introduction@@getting-started@@command-line-tool","Introduction","Getting Started","Command Line Tool","Mdoc comes with a command line tool that: Generates a documentation website Runs auto-preview on a local server Runs documentation server"],["introduction@@getting-started@@markdown","Introduction","Getting Started","Markdown","Fastest way to learn Markdown is to go to  http://commonmark.org/help/ CommonMark  website and go through a 60 seconds cheatsheet or 10 minutes tutorial."],["introduction@@getting-started@@installation","Introduction","Getting Started","Installation","https://cmdb.twosigma.com/entities/mdoc-opt-in Optin  to add the command line to your hosts. Check tool presence by running mdoc --help"],["introduction@@getting-started@@scaffolding","Introduction","Getting Started","Scaffolding","To create a minimum set of files for your documentation execute mdoc --new mdoc\n   |--chapter-one\n             |--page-one.md\n             |--page-two.md\n   |--chapter-two\n             |--page-three.md\n             |--page-four.md\n   |--toc\n   |--lookup-paths\n   |--meta.json\n"],["introduction@@getting-started@@preview","Introduction","Getting Started","Preview","Navigate to the newly created directory. Start preview mode by running mdoc --preview The command will output a URL that directs to your preview. Blue  eye  icon in the top right corner indicates that preview is on. Open any text editor, modify and save  page-one.md  file. Changes will be reflected in the browser."],["introduction@@getting-started@@deploy","Introduction","Getting Started","Deploy","See  deployment/workflows documentation under Deployment"],["flow@@structure@@building-blocks","Flow","Structure","Building blocks","MDoc has three levels of documentation organization: Chapters Pages Page Sections MDoc encourages authors to split their content across multiple pages. If you feel like you need to use nested headings, consider moving your content hierarchy one level up: Split overlong page into multiple ones Introduce chapters Focus on one thing at a time"],["flow@@structure@@similarity-with-oop","Flow","Structure","Similarity with OOP","It may help to show parallel with  OOP  concepts Pages as  classes Page Sections as  methods Chapters as  packages It is bad practice to have one class with many unrelated methods. Similarly, it is bad practice to have one page with various unrelated sections."],["flow@@structure@@table-of-contents","Flow","Structure","Table Of Contents","Each documentation must have  toc  file in its root. This file contains chapters and pages. This is a  toc  file for this documentation. introduction\n    rationale\n    example\n    getting-started\nflow\n    structure\n    names\n    page-references\n    lookup-paths\n    search\n    footer\n    presentation\n    testing\nsnippets\n    code-snippets\n    external-code-snippets\n    java\n    groovy\n    typescript\n    cpp\n    json\n    xml\n    api-parameters\n    open-API\n    CLI\n    math\n    markdown\nlayout\n    attention-signs\n    tabs\n    tables\n    columns\n    templates\n    two-sides-pages\n    two-sides-tabs\nvisuals\n    smart-bullet-points\n    icons\n    charts\n    images\n    image-annotations\n    SVG\n    flow-diagrams\n    PlantUml\ndeployment\n    workflows\n    registration\n    TS-guides\nsynergy-with-testing\n    java\n    REST\n    web-UI\nconfiguration\n    basic Take a look at the left side bar and compare it with the file content. The top entry,  introduction , corresponds to the directory of the same name. The nested entry,  rationale , corresponds to the file  rationale.md ."],["flow@@structure@@sub-headings","Flow","Structure","Sub Headings","Only a first level heading is treated as a first class citizen: Part of  TOC Smallest unit of  search result # First Class Citizen\n Nested sub headings only add visual distinction within a page. ## Sub heading\ncontent of sub heading\n\n### Sub Sub heading\ncontent of sub sub heading\n Sub heading content of sub heading Sub Sub heading content of sub sub heading"],["flow@@structure@@meta","Flow","Structure","Meta","Each documentation must have the  meta.json  file in its root. This  JSON  file contains documentation display name, type, and optional  View On  information. {\n  \"title\": \"MDoc\",\n  \"type\": \"User Guide\",\n  \"viewOn\": {\n    \"link\": \"https://github.com/twosigma/TestingIsDocumenting/blob/master/znai-cli/documentation\",\n    \"title\": \"View On GitHub\"\n  }\n}"],["flow@@names@@auto-names","Flow","Page Titles","Auto names","By degault, page names are automatically derived from file names.  file-name.md  becomes  File Name  page title."],["flow@@names@@name-override","Flow","Page Titles","Name override","To override the default, add the following syntax to the top of your Markdown file: ---\ntitle: Custom Name\n---\n To keep things easy on future documentation owners, use this only when necessary. Examples: Need to use special characters in title Want to avoid auto-capitalization"],["flow@@page-references@@follow-the-order","Flow","Page References","Follow the Order","Most of the documentation should have a natural order to follow. Links to navigate to the next page are at the end of each page. Create links to remind users of an  essential  concept introduced previously. There is a good chance that a reader skipped over it or forgot. Avoid: links that navigate users forward. It breaks the flow of a documentation."],["flow@@page-references@@links","Flow","Page References","Links","To create an  external  link use: [Link Title](http://external/reference)\n To refer  internal  page within your documentation use: [internal link](dir-name/file-name#optional-page-section-id)\n Note: you can get  page-section-id  by hovering over a section title and pressing link icon. Your browser URL display the updated link. To refer back to the top-level  index  page use: [index link](/)\n Clicking this  / index page  link will have the same effect as clicking the documentation title at the top of the  Navigation Panel"],["flow@@page-references@@downloads","Flow","Page References","Downloads","Linking to a local file will deploy the file along with the generated documentation. Clicking the link will open a file using the browser\u0027s default method. Download [test json file](data/test.json)\n Download  data/test.json test json file"],["flow@@lookup-paths@@files-reference-lookup","Flow","Lookup Paths","Files Reference Lookup","When you refer a file using plugins like  :include-file: my-file.cpp  mdoc tries to find the file in following locations: directory with the markup file that refers  my-file.cpp documentation root directory locations enumerated inside  \u003cdoc-root\u003e/lookup-paths  file ../examples\n../module/src/main/java\n"],["flow@@lookup-paths@@http-lookup-location","Flow","Lookup Paths","HTTP lookup location","If files you want to include are not part of your project, you can add http base url to  lookup-paths . ../examples\n../module/src/main/java\nhttps://raw.githubusercontent.com/twosigma/webtau/master\n If file is not found using local locations it will be fetched from the provided urls :include-file: .travis.yml\n language: java\ncache:\n  directories:\n  - $HOME/.m2\n  - $HOME/.npm\n  - node_modules"],["flow@@search@@local","Flow","Search","Local","To perform a local search of your documentation press  /  key or click magnifying glass in the top right corner. In  flow/structure documentation structure  we learned that documentation consist of Chapters Pages Page Sections These entities play different and important roles in search. Search treats each  Page Section  as an independent unit. Each  Page Section  has an internally defined title that is a combination of all three titles. Title match during search yields the highest score. For example this current section full title is:  Flow Search Local . As your documentation grows, keep checking how easy it is to navigate to a section of your documentation using  / . Avoid: using generic names in your page titles and page section titles. You should not have dozens of pages called  Introduction"],["flow@@search@@global","Flow","Search","Global","Global search is performed by  https://search.app.twosigma.com search/ . Global search consider each page section as an independent entry as well. In the case of global search, the full title gets expanded to include documentation title, so the full title of the current section will be:  MDoc Flow Search Global . Go now and  https://search.app.twosigma.com search  for  mdoc search  and see what results are there. In case of global search it is even more important to come up with the good names for Chapters Pages Page Sections To make your product more discoverable consider naming your  page sections  and  page titles  to match potential user queries. E.g., consider a page called  Getting Started . DO # Node installation \n\nTo install node.js use ...\n DON\u0027T # Prerequsites\n\nTo install node.js use ...    \n"],["flow@@footer@@definition","Flow","Footer","Definition","To define a footer, create  footer.md  file in the root of your documentation files. Footer content will be treated as regular page content. I.e., you can use the standard Markdown and all the custom extensions. footer.md  content will be displayed at the bottom of each page."],["flow@@presentation@@equal-flow","Flow","Presentation","Equal Flow","When people build presentations for a product, there should be great focus on the flow of information, making sure that those who have never used the product are not lost. A poorly organized presentation might drive users seeking clarification to product documentation, which too often is just as unfriendly to neophytes. Presenttion mode in  MDoc  is meant to help with both issues, mutually reinforcing good flow in presentations and documentation."],["flow@@presentation@@presentation-mode","Flow","Presentation","Presentation Mode","MDoc  can turn any page into a presentation. Simply click   to the far fight of each page title. In presentation mode, only certain documentation elements are converted to slides: Headings Bullets Images and graphics Code snippets Command line input Math Tables If you write your documentation with a presentation in mind it should improve the flow of your documentation."],["flow@@testing@@user-scenarios","Flow","Testing","User Scenarios","Focus your documentation on scenarios users can perform. Before documenting them, you need to make sure that they actually work. You could perform a manual test every time you release your software, but it is time consuming and error prone. Alternatively, you could write automated tests to make sure that scenarios you are writing about are validated. At the test run time, capture test produced artifacts: Command line output Screenshots Business logic calculation REST responses Config files Script snippets Runtime dependencies DAGs etc Include the captured artifacts inside your documentation to keep it up to date. As you write your documentation you will come up with new scenarios to test. And as you write tests, think about documentation and what test-produced artifacts can improve it. In the rest of this documentation you will learn how to include artifacts. There are also examples of synergy between tests and documentation in the later chapters."],["snippets@@code-snippets@@simple-snippet","Snippets","Code Snippets","Simple Snippet","It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this. interface PriceService {\n    Money calcPrice(String cuips, Integer quantity);\n}\n # Simple Snippet\n\nIt is very easy to add a code snippet or an output result.\nAll you have to do is indent your code with 4 spaces inside your Markdown document and\nyour code will be rendered like this.\n\n    interface PriceService {\n        Money calcPrice(String cuips, Integer quantity);\n    } Note: this method doesn\u0027t highlight code."],["snippets@@code-snippets@@specifying-language","Snippets","Code Snippets","Specifying Language","You can also specify a language to enable syntax highlighting for your snippet. javascript\nimport React, {Component} from \u0027react\u0027\n\nclass MyComponent extends Component {\n    render() {\n        /// ...\n    }\n}\n\n import React, {Component} from \u0027react\u0027\n\nclass MyComponent extends Component {\n    render() {\n        /// ...\n    }\n}\n The following languages are supported: Java JavaScript Groovy C++ Python Bash MDoc  uses  http://prismjs.com prismjs  library to provide syntax highlighting. Note that it is not being executed inside the browser, but rather applied during HTML generation."],["snippets@@code-snippets@@title","Snippets","Code Snippets","Title","Use  title  property to specify a title. javascript {title: \"ReactJS Component\"}\n...\n\n import React, {Component} from \u0027react\u0027\n\nclass MyComponent extends Component {\n    render() {\n        /// ...\n    }\n}\n"],["snippets@@code-snippets@@wide-code","Snippets","Code Snippets","Wide Code","Use  wide  option to stretch wide code to occupy as much horizontal real estate as possible. java {wide: true}\nclass InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n}\n\n class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n}\n Without  wide  option code will be aligned with the rest of the text and users can use scrollbars. class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n}\n Note: Good placement of a  Wide Code  is at the end of a page or a section to show the full version of a code sample."],["snippets@@code-snippets@@read-more","Snippets","Code Snippets","Read More","If you have a large code snippet and you want to initially display only a small fraction use  readMore  option with an  optional readMoreVisibleLines  option to specify a number of initial lines displayed (default is 8). java {readMore: true, readMoreVisibleLines: 3}\npublic class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n    ...\n\n public class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n        this.workingDir \u003d workingDir;\n        this.fileNameByDirName \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    public void create() {\n        createPages();\n        createToc();\n        createMeta();\n        createIndex();\n        createLookupPaths();\n    }\n\n    private void createLookupPaths() {\n        createFileFromResource(\"lookup-paths\");\n    }\n\n    private void createMeta() {\n        createFileFromResource(\"meta.json\");\n    }\n}\n"],["snippets@@code-snippets@@highlights","Snippets","Code Snippets","Highlights","Use  highlight  option to bring readers attention to the important lines. java {highlight: \"workingDir\"}\npublic class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n    ...\n    }\n\n public class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n    ...\n    }\n Note: You will get a build time error if the specified substring is not found in any of the snippet lines It is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. java {highlight: [2,  \"...\"]}\npublic class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n    ...\n    }\n    \n public class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n    ...\n    }\n Note: Order of lines to highlight is reflected during presentation mode"],["snippets@@code-snippets@@inlined","Snippets","Code Snippets","Inlined","To inline code within a text simply put it inside a back tick. E.g. To check if an Exchange is closed, you need to use  ExchangeCalendar # Inlined\n\nTo inline code within a text simply put it inside a back tick. \nE.g. To check if an Exchange is closed, you need to use ExchangeCalendar"],["snippets@@external-code-snippets@@existing-file","Snippets","External Code Snippets","Existing File","To boost documentation maintainability you can refer text and code snippets from already existing files. :include-file: file-name.js\n Include-dash family is our custom extension to Markdown to support various scenarios. class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass File will be looked up using following rules: directory with a markup file root directory of a documentation all lookup paths listed in a special file"],["snippets@@external-code-snippets@@title","Snippets","External Code Snippets","Title",":include-file: file-name.js {title: \"ES6 class\"} \n Use  title  property to specify a title. class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass"],["snippets@@external-code-snippets@@wide-code","Snippets","External Code Snippets","Wide Code","Use  wide  option to stretch wide code to occupy as much real estate as possible. :include-file: WideCode.java {wide: true}\n class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n} Without  wide  option code will be aligned with the rest of the text and users can use scrollbars. class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n} Note: Good placement of a  Wide Code  is at the end of a page or a section to show the full version of a code sample."],["snippets@@external-code-snippets@@read-more","Snippets","External Code Snippets","Read More","If you have a file with large code snippet and you want to initially display only a small fraction use  readMore  option with an  optional   readMoreVisibleLines  option to specify a number of initial lines displayed (default is 8). :include-file: LongFile.java {readMore: true, readMoreVisibleLines: 3}\n public class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n        this.workingDir \u003d workingDir;\n        this.fileNameByDirName \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    public void create() {\n        createPages();\n        createToc();\n        createMeta();\n        createIndex();\n        createLookupPaths();\n    }\n\n    private void createLookupPaths() {\n        createFileFromResource(\"lookup-paths\");\n    }\n\n    private void createMeta() {\n        createFileFromResource(\"meta.json\");\n    }\n}"],["snippets@@external-code-snippets@@highlights","Snippets","External Code Snippets","Highlights","Use  highlight  option to bring readers attention to the important lines. :include-file: file-name.js {highlight: \"export\"}\n class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass It is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. :include-file: file-name.js {highlight: [\"export\", 1]}\n class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass Note: Order of lines to highlight is reflected during presentation mode"],["snippets@@external-code-snippets@@callout-comments","Snippets","External Code Snippets","Callout Comments","If you already have comments inside your code it would be non effecient to repeat them inside documentation. Instead comments can be automatically extracted and presented as part of the text Given file with inlined comments class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules By specifying  commentsType :include-file: file-name-with-comments.js {commentsType: \"inline\"}\n It will be rendered as class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules"],["snippets@@external-code-snippets@@spoilers","Snippets","External Code Snippets","Spoilers","Set  spoiler  property to initially hide explanations. It may be useful when teaching or class. :include-file: file-name-with-comments.js {commentsType: \"inline\", spoiler: true}\n Click on the spoiler to reveal the explanations. class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules"],["snippets@@java@@method-body","Snippets","Java","Method Body","When you need to extract a specific method body use  include-java  plugin. Consider the file below: /**\n * Top level conceptual description of a \u003ci\u003eDomain\u003c/i\u003e problem.\n * \u003cp\u003e\n * To avoid \u003cb\u003ecopy \u0026 paste\u003c/b\u003e of the content consider to re-use information.\n */\nclass HelloWorld {\n    /**\n     * Each year we hire students from different universities to increase\n     * \u003ccode\u003ediversity\u003c/code\u003e\n     */\n    private int numberOfStudents;\n\n    /**\n     * Conceptual description of a \u003ci\u003eDomain\u003c/i\u003e problem.\n     * \u003cp\u003e\n     * It will work only if you put high level description here and\n     * \u003cb\u003enot\u003c/b\u003e implementation details.\n     *\n     * @param p1 important parameter of something\n     * @param p2 sample offset according to the rules of the universe\n     * @return name of the best sample\n     */\n    public String sampleMethod(String p1, int p2) {\n        validate();\n        process(p2); // important comment\n        notifyAll(p1); // very important\n\n        return bestSample();\n    }\n\n    public void sampleMethod(Map\u003cString, Integer\u003e p1, int p2, boolean isActive) {\n        // overloaded method\n    }\n\n    public void importantAction() {\n        // TODO important\n    }\n} You can specify a method name to extract its full definition, or display only its body. :include-java: HelloWorld.java {entry: \"sampleMethod\", bodyOnly: true}\n If  bodyOnly  is specified, signature will be omitted. validate();\nprocess(p2); // important comment\nnotifyAll(p1); // very important\n\nreturn bestSample();"],["snippets@@java@@callout-comments","Snippets","Java","Callout Comments","Similar to how you  snippets/external-code-snippets#callout-comments specify comments type  for a regular file, you can specify  commentsType  option for  include-java . :include-java: HelloWorld.java {entry: \"sampleMethod\", bodyOnly: true, commentsType: \"inline\"}\n validate();\nprocess(p2); // important comment\nnotifyAll(p1); // very important\n\nreturn bestSample();"],["snippets@@java@@signature-only","Snippets","Java","Signature Only","Specifying a method name to extract only its body. :include-java: HelloWorld.java {entry: \"sampleMethod\", signatureOnly: true}\n If  signatureOnly  is specified, body will be omitted. public String sampleMethod(String p1, int p2)"],["snippets@@java@@overloads","Snippets","Java","Overloads","Specify types inside brackets to select an overloaded versions of your methods. Types should appear as they are in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. :include-java: HelloWorld.java {entry: \"sampleMethod(Map, int, boolean)\"}\n Note: Generic types are erased and spaces after commas are optional public void sampleMethod(Map\u003cString, Integer\u003e p1, int p2, boolean isActive) {\n    // overloaded method\n}"],["snippets@@java@@type-body","Snippets","Java","Type Body","To extract  class ,  interface  or  enum  body use: :include-java: MyEnum.java {entry: \"MyEnum\"}\n enum MyEnum {\n    /**\n     * description of \u003cb\u003eentry one\u003c/b\u003e\n     */\n    ENTRY_ONE,\n\n    /**\n     * description of entry two\n     * \u003cul\u003e\n     *     \u003cli\u003eitem one\u003c/li\u003e\n     *     \u003cli\u003eitem two\u003c/li\u003e\n     * \u003c/ul\u003e\n     */\n    ENTRY_TWO,\n\n    /**\n     * Don\u0027t use, instead use ENTRY_TWO\n     */\n    @Deprecated\n    ENTRY_THREE\n} Use  bodyOnly  to only display body of your type. :include-java: MyEnum.java {entry: \"MyEnum\", bodyOnly: true}\n /**\n * description of \u003cb\u003eentry one\u003c/b\u003e\n */\nENTRY_ONE,\n\n/**\n * description of entry two\n * \u003cul\u003e\n *     \u003cli\u003eitem one\u003c/li\u003e\n *     \u003cli\u003eitem two\u003c/li\u003e\n * \u003c/ul\u003e\n */\nENTRY_TWO,\n\n/**\n * Don\u0027t use, instead use ENTRY_TWO\n */\n@Deprecated\nENTRY_THREE"],["snippets@@java@@multiple-entries","Snippets","Java","Multiple Entries","To display multiple methods at once use  entries  parameter to pass a list of method names. :include-java: HelloWorld.java {entries: [\"sampleMethod\", \"importantAction\"]}\n will render: public String sampleMethod(String p1, int p2) {\n    validate();\n    process(p2); // important comment\n    notifyAll(p1); // very important\n\n    return bestSample();\n}\n\npublic void importantAction() {\n    // TODO important\n} List important methods signatures at one place by passing  signatureOnly: true . :include-java: HelloWorld.java {entries: [\"sampleMethod\", \"importantAction\"], signatureOnly: true}\n will render: public String sampleMethod(String p1, int p2)\npublic void importantAction()"],["snippets@@java@@class-javadoc","Snippets","Java","Class JavaDoc","Documentation maintenance is one of the main goals of this documentation system. In case of Java you may already use  JavaDoc  strings to explain certain concepts of your system. /**\n * Top level conceptual description of a \u003ci\u003eDomain\u003c/i\u003e problem.\n * \u003cp\u003e\n * To avoid \u003cb\u003ecopy \u0026 paste\u003c/b\u003e of the content consider to re-use information.\n */\nclass HelloWorld {\n    /**\n     * Each year we hire students from different universities to increase\n     * \u003ccode\u003ediversity\u003c/code\u003e\n     */\n    private int numberOfStudents;\n\n    /**\n     * Conceptual description of a \u003ci\u003eDomain\u003c/i\u003e problem.\n     * \u003cp\u003e\n     * It will work only if you put high level description here and\n     * \u003cb\u003enot\u003c/b\u003e implementation details.\n     *\n     * @param p1 important parameter of something\n     * @param p2 sample offset according to the rules of the universe\n     * @return name of the best sample\n     */\n    public String sampleMethod(String p1, int p2) {\n        validate();\n        process(p2); // important comment\n        notifyAll(p1); // very important\n\n        return bestSample();\n    }\n\n    public void sampleMethod(Map\u003cString, Integer\u003e p1, int p2, boolean isActive) {\n        // overloaded method\n    }\n\n    public void importantAction() {\n        // TODO important\n    }\n} Instead of copy and pasting text between sources, you can refer to it inside your documentation. :include-java-doc: HelloWorld.java\n Text bellow is extracted from top class level  JavaDoc null"],["snippets@@java@@method-javadoc","Snippets","Java","Method JavaDoc","Method level  JavaDoc  text can be referred to as well by specifying the  entry  parameter. :include-java-doc: HelloWorld.java {entry: \"sampleMethod\"}\n Text bellow is extracted from  sampleMethod  method  JavaDoc sampleMethod"],["snippets@@java@@field-javadoc","Snippets","Java","Field JavaDoc",":include-java-doc: HelloWorld.java {entry: \"numberOfStudents\"}\n numberOfStudents"],["snippets@@java@@method-javadoc-params","Snippets","Java","Method JavaDoc Params",":include-java-doc-params: HelloWorld.java {entry: \"sampleMethod\"}\n p1 String important parameter of something p2 int sample offset according to the rules of the universe"],["snippets@@java@@enum-entries","Snippets","Java","Enum Entries","Use  include-java-enum-entries  to enumerate entries of a enum from a file. package my.company;\n\nimport java.util.List;\n\nenum MyEnum {\n    /**\n     * description of \u003cb\u003eentry one\u003c/b\u003e\n     */\n    ENTRY_ONE,\n\n    /**\n     * description of entry two\n     * \u003cul\u003e\n     *     \u003cli\u003eitem one\u003c/li\u003e\n     *     \u003cli\u003eitem two\u003c/li\u003e\n     * \u003c/ul\u003e\n     */\n    ENTRY_TWO,\n\n    /**\n     * Don\u0027t use, instead use ENTRY_TWO\n     */\n    @Deprecated\n    ENTRY_THREE\n} :include-java-enum-entries: MyEnum.java\n ENTRY_ONE description of \u003cb\u003eentry one\u003c/b\u003e ENTRY_TWO description of entry two\n\u003cul\u003e\n    \u003cli\u003eitem one\u003c/li\u003e\n    \u003cli\u003eitem two\u003c/li\u003e\n\u003c/ul\u003e ENTRY_THREE Don\u0027t use, instead use ENTRY_TWO You can exclude deprecated entries from the list by specifying  excludeDeprecated  parameter. :include-java-enum-entries: MyEnum.java {excludeDeprecated: true}\n ENTRY_ONE description of \u003cb\u003eentry one\u003c/b\u003e ENTRY_TWO description of entry two\n\u003cul\u003e\n    \u003cli\u003eitem one\u003c/li\u003e\n    \u003cli\u003eitem two\u003c/li\u003e\n\u003c/ul\u003e ENTRY_THREE Don\u0027t use, instead use ENTRY_TWO"],["snippets@@groovy@@method-body","Snippets","Groovy","Method Body","When you need to extract a specific method body use  include-groovy  plugin. Consider the following file: Specify a method name to extract it from the file. :include-groovy: HelloWorldTest.groovy {entry: \"should calculate risk based on epsilon\", bodyOnly: true}\n If  bodyOnly  is specified, signature will be omitted."],["snippets@@groovy@@overloads","Snippets","Groovy","Overloads","Specify types inside brackets to select an overloaded versions of your methods. Types should appear as they are in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. :include-groovy: HelloWorld.groovy {entry: \"methodName(List, Map)\"}\n:include-groovy: HelloWorld.groovy {entry: \"methodName(def,def)\"}\n Note: Generic types are erased and spaces after commas are optional Note:  def  type remains  def  and not  Object"],["snippets@@groovy@@class-body","Snippets","Groovy","Class Body","//\n// copyright large statement\n//\n\nimport you.company.com.util.*\n\n/*\n groovy docs on top\n */\nclass HelloWorld {\n    void methodName(List\u003cString\u003e a, Map\u003cString, Integer\u003e b) {\n        actionA()\n    }\n\n    void methodName(List\u003cString\u003e a, Boolean b) {\n        actionB()\n    }\n\n    void methodName(def a, def b) {\n        actionC()\n    }\n} To extract  class  body use: :include-groovy: HelloWorld.groovy {entry: \"HelloWorld\"}\n Use  bodyOnly  to only display only the body of your class. :include-groovy: HelloWorld.groovy {entry: \"HelloWorld\", bodyOnly: true}\n"],["snippets@@typescript@@parsing","Snippets","Typescript","Parsing","Mdoc uses typescript  nodejs  module to parse TypeScript. Use the  typescript  plugin to include parsed information."],["snippets@@typescript@@properties","Snippets","Typescript","Properties","/**\n * top level doc string\n */\nexport class Customer {\n    /**\n     * customer\u0027s first name\n     */\n    firstName: string;\n\n    /**\n     * customer\u0027s last name\n     */\n    lastName: string;\n\n    /**\n     * method A \u003cb\u003edescription\u003c/b\u003e and some\n     * @param {string} input for \u003ci\u003etest\u003c/i\u003e\n     */\n    methodA(input: string) {\n        console.log(\u0027method a body\u0027);\n        console.log(\u0027test22\u0027);\n    }\n} Use the  propertiesOf  parameter to list properties of a specified class. :include-typescript: typescript/Customer.ts {propertiesOf: \"Customer\"}\n"],["snippets@@typescript@@jsx-elements","Snippets","Typescript","JSX Elements","import { PrimaryButton } from \u0027my-lib\u0027;\n\nfunction buttonsDemo(registry) {\n    registry\n        .add(\u0027primary\u0027, \u003cPrimaryButton label\u003d\"Click Me\"/\u003e)\n        .add(\u0027primary disabled\u0027, \u003cPrimaryButton label\u003d\"Click Me\" disabled\u003d{true}/\u003e);\n} Use the  jsxElementsFrom  to extract  JSX  elements from a function. :include-typescript: typescript/demo.tsx {jsxElementsFrom: \"buttonsDemo\"}\n"],["snippets@@cpp@@comments","Snippets","Cpp","Comments","You can re-use comments that are inside your functions and refer to them inside your    documentation. Mark a comment with  @mdoc  and use  :include-comments:  plugin. int my_func() {\n    // @mdoc important context information goes here\n    // this information is useful and can be re-used inside a user guide\n\n    code_goes_here();\n     // this comment is not marked\n    another_code();\n\n    /* @mdoc\n    another piece of **documentation**\n    in multiple lines, but it will be treated as markdown\n    */\n} Specify a file and an entry point to extract comments from. :include-cpp-comments: comments.cpp {entry: \"my_func\"}\n Result will be a text rendered as if it was typed inside markup file. See the text immediately below:"],["snippets@@json@@paths","Snippets","Json","Paths","Use the  include-json  plugin to bring attention to a certain place in a  JSON  file. :include-json: book-store.json {paths: [\"root.store.book[0].category\", \"root.store.book[2].category\"]}\n Comma-separated paths specified inside  paths  will be highlighted."],["snippets@@json@@paths-from-file","Snippets","Json","Paths From File","Use  pathsFile  to specify a file to read paths from :include-json: book-store.json {pathsFile: \"book-store-paths.json\"}\n"],["snippets@@json@@json-subparts","Snippets","Json","Json Subparts","To include only a portion of your document pass  https://github.com/json-path/JsonPath Json Path  as  include  property :include-json: book-store.json {include: \"$..book[0,1]\"}\n"],["snippets@@json@@title","Snippets","Json","Title","To specify a title use the  title  property :include-json: book-store.json {include: \"$..book[0,1]\", title: \"Books\"}\n"],["snippets@@json@@read-more","Snippets","Json","Read More","Use  readMore  to show only first lines of  JSON .  Optional   readMoreVisibleLines  can be specified to set the initial number of lines to display :include-json: book-store.json {readMore: true, readMoreVisibleLines: 5}\n"],["snippets@@json@@hidden-parts","Snippets","Json","Hidden Parts","To hide sub-parts of your JSON use  collapsedPaths  property. :include-json: book-store.json {collapsedPaths: [\u0027root.store.book\u0027]}\n"],["snippets@@json@@highlights","Snippets","Json","Highlights","Additionally to highlighting a specific  JSON  value using  paths , you can (similarly to  snippets/external-code-snippets#highlights regular code snippets ) highlight a line by text matching or by providing a line index. :include-json: book-store.json {highlight: [\"category\", 2]}\n"],["snippets@@json@@test-results","Snippets","Json","Test Results","Consider leveraging testing frameworks to extract  JSON  samples from your end points. Information about what assertions were made can be used to highlight points of interest."],["snippets@@xml@@highlight-parts","Snippets","Xml","Highlight Parts","Use the  include-xml  plugin to bring attention to a certain place in a  XML  file. Comma-separated paths specified inside  paths  will be highlighted. :include-xml: menu.html {paths: [\"ul.@class\", \"ul.li[1].@class\", \"ul.li[2]\"]}\n Note: Children index in  paths  starts with 0 and is associated with a tag :include-xml: simple.xml {paths: [\"root.a[1]\", \"root.b[0]\", \"root.c[0]\"]}\n"],["snippets@@xml@@use-cases","Snippets","Xml","Use cases","include-xml  and  paths  can be used to document: XML Config CSS selectors ReactJS properties AngularJS templates In presentation mode, paths will be highlighted one at a time."],["snippets@@xml@@title","Snippets","Xml","Title","Use the  title  property to specify a title. :include-xml: menu.html {title: \"Menu snippet\"}\n"],["snippets@@api-parameters@@inlined-csv","Snippets","Api Parameters","Inlined CSV","When you are not able to automatically extract an API parameters definition you can use the  api-parameters  fence plugin to manually document them. api-parameters\nfirstName, String, description with *markdown* support\nscore, Integer, another description line with *markdown* support\n\n"],["snippets@@api-parameters@@nested","Snippets","Api Parameters","Nested","Use  parent.children  syntax to define nested objects like this api-parameters\nsessionId, Integer, session Id\nperson, Person, person to login with\nperson.firstName, String, first name of the person\nperson.lastName, String, last name of the person\nroles, List\u003cRole\u003e, list of authorized roles\nroles.id, String, role id \nroles.description, String, role description\n\n Note: you still need to explicitly define  root  entry like  person  in the example above"],["snippets@@api-parameters@@external-json-file","Snippets","Api Parameters","External Json file","Instead of hardcoding your parameters inside markdown file, you can specify an external json file. Json could be generated based on the data you have. Some of the examples: build time annotation processor test time command line parameters generation Given the file use :include-api-parameters: api-parameters.json\n to display it as API Parameters Note:  description  field in JSON file is treated as Markdown"],["snippets@@open-API@@operation-definition","Snippets","Open API","Operation definition","If you have a file with an  https://github.com/OAI/OpenAPI-Specification/blob/master/README.md Open API definition (a.k.a. a Swagger file) you can render it by a given  method  and  path  or by  operationId . Both  yaml  and  json  formats are supported. Let\u0027s consider  https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v2.0/json/uber.json Uber\u0027s API definition  as an example: :include-open-api: open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\"}\n Note: descriptions are treated as Markdown, using the  http://commonmark.org/help/ CommonMark  specification"],["snippets@@open-API@@producesconsumes","Snippets","Open API","Produces/Consumes","By default  produces  and  consumes  parts are not displayed. If you document modern API chances are it will be consistent and you can specify at the start of your documentation that you are dealing with  application/json . Use  showConsumes  and  showProduces  params to show what content type are supported. :include-open-api: open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\", \n    showConsumes: true, showProduces: true}\n"],["snippets@@open-API@@time-estimates","Snippets","Open API","Time Estimates","Use the  autoSection  property to automatically generate a page section with a title taken from an operation summary. :include-open-api: open-api/uber.yaml {method: \"get\", path: \"/v1/estimates/time\", autoSection: true}\n Note: The section below is automatically generated by  include-open-api"],["snippets@@open-API@@time-estimates","Snippets","Open API","Time Estimates","Specify  tags  to automatically generate multiple entries from a service definition file. :include-open-api: open-api/uber.json {tags: \"Estimates\", autoSection: true}\n Note: The sections below are automatically generated by  include-open-api"],["snippets@@CLI@@command-parameters","Snippets","CLI","Command parameters","To bring attention to important parameters in your examples use the  cli-command  extension. :include-cli-command: my-super-command paramA --important-flag\u003dtrue {paramsToHighlight: \"important\"}\n my-super-command paramA --important-flag\u003dtrue Note: Parameter names gets matched as long as their names contain the passed value."],["snippets@@CLI@@long-commands","Snippets","CLI","Long Commands","Long command lines will be automatically wrapped into multiple lines. another-command --score\u003d2 --name\u003dName --value\u003d8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3"],["snippets@@CLI@@handle-special-symbols","Snippets","CLI","Handle Special Symbols","If your command contains special symbols like  {  then move command definition to  command  option :include-cli-command: {command: \"another-command {file1} [file2]\", paramsToHighlight: [\"file1\"]}\n another-command {file1} [file2]"],["snippets@@CLI@@output","Snippets","CLI","Output","To display console output and bring attention to certain lines use: :include-cli-output: file-path-of-captured.out {highlight: [0, 4]}\n Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    ea44003..e310685  master -\u003e master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    e310685..900e0be  master -\u003e master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    900e0be..bb9993f  master -\u003e master"],["snippets@@CLI@@presentation-mode","Snippets","CLI","Presentation mode","In presentation mode,  cli-command  will simulate typing inside the terminal. If your  cli-output  is long, you can split the presentation output into chunks: :include-cli-output: file-path-of-captured.out {highlight: [0, 4], chunkSize: 10, fadedSize: 2}\n chunkSize  specifies the maximum number of lines visible at a time. fadedSize  specifies how many lines will be visible after and before as you move through output (default is 2). Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    ea44003..e310685  master -\u003e master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    e310685..900e0be  master -\u003e master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/twosigma/TestingIsDocumenting.git    900e0be..bb9993f  master -\u003e master"],["snippets@@math@@latex","Snippets","Math","LATEX","To render math you can use  https://en.wikibooks.org/wiki/LaTeX/Mathematics LaTeX  math expressions. Surround LaTeX expression with fenced block and specify  latex  as a language latex\n\\forall x \\in X, \\quad \\exists y \\leq \\epsilon\n\n The result will be a following math expression. In presentation mode, rendered expressions will automatically scale to make use of the screen space."],["snippets@@markdown@@single-markdown-file","Snippets","Markdown","Single Markdown File","To reuse Markdown in several places without duplication, use the  include-markdown  plugin. :include-markdown: markdown-dir/md-to-include.md\n"],["snippets@@markdown@@multiple-markdown-files","Snippets","Markdown","Multiple Markdown Files","You can also include all the Markdown files within a directory by using  include-markdowns . This plugin can be used to generate a release notes or an FAQ page :include-markdowns: markdown-dir\n Note:  include-markdowns  displays the files of the specified directory based on the filename, in alphabetical order."],["layout@@attention-signs@@speed-bump","Layout","Attention Signs","Speed Bump","People skim through documentation. You can grab users attention by using attention signs. To create an attention sign, start a paragraph with one of the predefined keywords followed by a colon. Keyword: message\n"],["layout@@attention-signs@@note","Layout","Attention Signs","Note","Note: It is very important to not overuse signs. Make sure each sign counts.\n Note: It is very important to not overuse signs. Make sure each sign counts."],["layout@@attention-signs@@warning","Layout","Attention Signs","Warning","Warning: Bring attention to a common mistake or an often missed configuration step \nusing a warning sign. Do not use too many warning signs.\n Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs."],["layout@@attention-signs@@avoid","Layout","Attention Signs","Avoid","Avoid: using multiple versions of ReactJS inside one project.\n Avoid: using multiple versions of  ReactJS  inside one project."],["layout@@attention-signs@@do-not","Layout","Attention Signs","Do not","Don\u0027t: commit node_modules to your repository\n\nDo not: commit node_modules to your repository\n Don\u0027t: commit node_modules to your repository Do not: commit node_modules to your repository"],["layout@@attention-signs@@question","Layout","Attention Signs","Question","Question: Use the question sign to bring an extra attention to a main idea of a page.\n\\\nWhat is the point of the attention signs?\n Question: Use the question sign to bring an extra attention to the main idea of a page. What is the point of the  attention signs ?"],["layout@@tabs@@primary-use-case","Layout","Tabs","Primary Use Case","Imagine your product supports multiple ways of achieving a final result: REST Web CLI Java Python more... Provide a selection inside your documentation if your user needs only one to accomplish the goal. Selections will persist for users and provide streamlined experience. Do not: use tabs as navigation experience. If your user needs both  Java  and  Python  executed one by one you need to show steps one after another in proper order."],["layout@@tabs@@definition","Layout","Tabs","Definition","To define multiple tabs we use fenced code block: tabs\nJavaScript: :include-file: snippets/file-name.js\nJava: :include-file: snippets/WideCode.java\nCpp: :include-cpp: snippets/simple.cpp {entry: \u0027main\u0027, bodyOnly: true}\n\n This will generate a multi-tab widget with  include-  plugin content for each tab. JavaScript class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass Java class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n} Cpp  Selecting a tab will switch all the tabs on every page."],["layout@@tabs@@markdown-per-tab","Layout","Tabs","Markdown Per Tab","Any valid Markdown can be used in place of  include-  content. A typical use case for  installation instructions  might be dividing content per language or environment: tabs\nJavaScript: \nFirst you need to download WebStorm and then run following using your terminal\n\nbash\n$ yarn install\n$ yarn start\n\n    \nJava: \nFirst you need to download Intellij IDEA and then run following using your terminal\n    \nbash\n$ mvn install\n$ mvn exec:exec\n\n    \nCpp: \nFirst you need to download CLion and then run following using your terminal\n\nbash\n$ pwd\n$ whoamis\n\n\n JavaScript First you need to download WebStorm and then run following using your terminal $ yarn install\n$ yarn start\n Java First you need to download Intellij IDEA and then run following using your terminal $ mvn install\n$ mvn exec:exec\n Cpp First you need to download CLion and then run following using your terminal $ pwd\n$ whoamis\n"],["layout@@tabs@@separate-markdown-files","Layout","Tabs","Separate Markdown files","Consider extracting content to separate markup files if content becomes long. Use the  include-markdown  plugin to include external content. tabs\nJavaScript: :include-markdown: instructions/javascript-install.md\nJava: :include-markdown: instructions/java-install.md\nCpp: :include-markdown: instructions/cpp-install.md\n\n Each tab will display inlined markdown from specified files. JavaScript  Java  Cpp "],["layout@@tabs@@attention-signs","Layout","Tabs","Attention Signs","Use extra space(s) in front of  Note:  or other attention sign keywords to put attention signs inside a tab. Remember if you put 4+ spaces your paragraph will become a code snippet tabs\nJavaScript: \n\nbash\n$ yarn install\n$ yarn start\n\n\n Avoid: committing node_modules\n    \nJava: \nFirst you need to download Intellij IDEA and then run following using your terminal\n    \nbash\n$ mvn install\n$ mvn exec:exec\n\n    \n Warning: mvn install for the first time may take considerable amount of time\n\nCpp: \nFirst you need to download CLion and then run following using your terminal\n\nbash\n$ pwd\n$ whoamis\n\n\n Question: is C++ awesome or what?\n\n JavaScript $ yarn install\n$ yarn start\n Do not: commit node_modules to the repository Java First you need to download Intellij IDEA and then run following using your terminal $ mvn install\n$ mvn exec:exec\n Warning:  mvn  install for the first time may take considerable amount of time Cpp First you need to download CLion and then run following using your terminal $ pwd\n$ whoamis\n Question: is C++ awesome or what?"],["layout@@tables@@csv","Layout","Tables","CSV","Instead of aligning tables using one of the standard Markdown extensions, you can use your  CSV  editor of choice. :include-table: table.csv \n In this way, the following  CSV  file... Account, Price, Description\n#12BGD3, 100, custom table with a long attachment\n#12BGD3, 150, chair\n#91AGB1, 10, lunch ...will render like so: Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@json","Layout","Tables","JSON","A similar extension can be used to display data from a  JSON  file representing tabular data. :include-table: table.json \n So the following  JSON  file... [\n  {\n    \"Account\": \"#12BGD3\",\n    \"Price\": 100,\n    \"Description\": \"custom table with a long attachment\"\n  },\n  {\n    \"Account\": \"#12BGD3\",\n    \"Price\": 150,\n    \"Description\": \"chair\"\n  },\n  {\n    \"Account\": \"#91AGB1\",\n    \"Price\": 10,\n    \"Description\": \"lunch\"\n  }\n] ...will render like so: Account Price Description #12BGD3 100.0 custom table with a long attachment #12BGD3 150.0 chair #91AGB1 10.0 lunch"],["layout@@tables@@arrange-and-filter","Layout","Tables","Arrange and Filter","To change the order of columns or filter out certain columns, specify the  columns  parameter. :include-table: table.csv {columns: [\"Description\", \"Price\"]}\n Description Price custom table with a long attachment 100 chair 150 lunch 10"],["layout@@tables@@alignment-and-width","Layout","Tables","Alignment and Width","By default column width is auto-calculated to fit the values inside. But you can control the width with the extra options. :include-table: table.csv {Price: {width: 200}, \"Description\": {width: 400}}\n Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch And if you need to change a column alignment from default  left  to  right  just add the  align  property. :include-table: table.csv {Price: {width: 200, align: \"right\"}}\n Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch You can do the same for  JSON  data: :include-table: table.json {Price: {width: 100, align: \"right\"}}\n Account Price Description #12BGD3 100.0 custom table with a long attachment #12BGD3 150.0 chair #91AGB1 10.0 lunch"],["layout@@tables@@markdown-in-cells","Layout","Tables","Markdown in Cells","You can use markup syntax within table file. Account, Price, Description\n#12BGD3, 100, **custom** table with a long attachment\n#12BGD3, 150, chair\n#91AGB1, 10, lunch Account Price Description #12BGD3 100 **custom** table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch"],["layout@@tables@@github-flavored-table","Layout","Tables","Github Flavored Table","| Github        | Flavored      | Table |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n Github Flavored Table [{text\u003dcol 3 is, type\u003dSimpleText}] [{text\u003dright-aligned, type\u003dSimpleText}] [{text\u003d$1600, type\u003dSimpleText}] [{text\u003dcol 2 is, type\u003dSimpleText}] [{text\u003dcentered, type\u003dSimpleText}] [{text\u003d$12, type\u003dSimpleText}]"],["layout@@columns@@information-layout","Layout","Columns","Information Layout","The way your information is laid out affects how easy it is to comprehend given material. Some content benefits from being formatted side-by-side. Some examples are: Before-and-after transition Action and its result Input and output"],["layout@@columns@@definition","Layout","Columns","Definition","To define columns layout use a  fenced  block plugin with the  columns  keyword: columns\nleft: \nthis content goes to the left\n\nand can span multiple lines\nright: this content goes to the right\n\nand can span multiple lines\n\n this content goes to the left and can span multiple lines this content goes to the right and can span multiple lines"],["layout@@columns@@sizes","Layout","Columns","Sizes","Size can be specified for a column as a  portion . By default both portions are assigned a value of  10 . If you specify  portion  to be  3  for left column it will occupy  0.3  of the space. columns {left: {portion: 3}}\nleft: \nthis content goes to the left\n\nand can span multiple lines\nright: this content goes to the right\n\nand can span multiple lines\n\n this content goes to the left and can span multiple lines this content goes to the right and can span multiple lines"],["layout@@columns@@border","Layout","Columns","Border","You can add a border to your columns. columns {left: {portion: 3}, border: true}\nleft: **Argument Name**\nright: Argument description and what argument is for\n\ncolumns {left: {portion: 3}, border: true}\nleft: **Another Name**\nright: Argument description and what argument is for\n\n Argument Name Argument description and what argument is for Another Name Argument description and what argument is for"],["layout@@columns@@alignment","Layout","Columns","Alignment","Specify text alignment using  align . columns {left: {portion: 3, align: \"right\"}, border: true}\nleft: **Argument Name**\n\n*optional*\nright: Argument description and what argument is for\n\n Argument Name optional Argument description and what argument is for"],["layout@@templates@@dont-repeat-yourself","Layout","Templates","Don\u0027t repeat yourself","Define templates when you need to reuse the same layout. Suppose you are have to display multiple elements like the following: Name : John Title : Software Engineer Current Project : BBR Team : Team A Name : Sathish Title : Software Engineer Current Project : BBR Team : Team A"],["layout@@templates@@definition","Layout","Templates","Definition","Instead of copy and pasting, define a template in a separate file. MDoc uses the  http://freemarker.org FreeMarker  template engine. **Name**: ${name}\n\n**Title**: ${title}\n\n**Current Project**: BBR\n \n**Team**: Team A Insert your template using the fenced block syntax. The content inside the fenced block is treated as key/values. template templates/job.md\nname: Sathish\ntitle: Software Engineer\n\n Result is rendered below: Name :  Sathish Title :  Software Engineer Current Project : BBR Team : Team A"],["layout@@templates@@inlined","Layout","Templates","Inlined","Consider inlined templates if you don\u0027t need to pass a lot of parameter text to the template. :include-template: templates/arg-definition.md {name: \"Arg Name\", description: \"Description of the argument\"}\n\n:include-template: templates/arg-definition.md {name: \"Other Name\", optional: true, description: \"Yet another description of the argument\"}\n templates/arg-definition.md columns {left: {portion: 3, align: \"right\"}, border: true}\nleft: **${name}**\n\u003c#if optional??\u003e\n\\\n*optional*\n\u003c/#if\u003e\nright: ${description}\n Arg Name Description of the argument Other Name optional Yet another description of the argument"],["layout@@templates@@external-parameters","Layout","Templates","External Parameters","Templates can get parameters from an external file. The file can be either manually created or generated by a script or test. Consider an external  JSON  file... {\n  \"name\": \"specified name\",\n  \"code\": \"class CodeSnippet {\\n    ...\\n}\",\n  \"description\": \"generated description\"\n} ...and a template like the following: columns {left: {align: \"right\", portion: 3}, border: true}\nleft: ${name}\nright: ${description}\n\njava\n${code}\n\n\n You can include a template in your page and make use of parameters from the file: :include-template: templates/test-artifact.md {paramsPath: \"artifacts/generated-values.json\"}\n specified name generated description class CodeSnippet {\n    ...\n}\n"],["layout@@templates@@loops","Layout","Templates","Loops","You can loop over list of parameters using  http://freemarker.org/docs/ref_directive_list.html FreeMarker loop Consider an external file... {\"names\": [\n  {\"name\": \"Name 1\", \"description\": \"Description 1\"},\n  {\"name\": \"Name 2\", \"description\": \"Description 2\", \"optional\": \"true\"},\n  {\"name\": \"Name 3\", \"description\": \"Description 3\"}\n]} ...and this template: \u003c#list names as n\u003e\ncolumns {left: {portion: 3, align: \"right\"}, border: true}\nleft: **${n.name}**\n\u003c#if n.optional??\u003e\n\\\n*optional*\n\u003c/#if\u003e\nright: ${n.description}\n\n\u003c/#list\u003e :include-template: templates/multiple-arg-definition.md {paramsPath: \"artifacts/names.json\"}\n Name 1 Description 1 Name 2 optional Description 2 Name 3 Description 3"],["layout@@two-sides-pages@@setup","Layout","Two Sides Pages","Setup","To enable two-sided layout as seen on this page, add the following at the beginning of a Markdown file: ---\ntype: two-sides\n---\n"],["layout@@two-sides-pages@@details-side","Layout","Two Sides Pages","Details Side","Use the right pane to display additional details. It could be a REST response or a code snippet. Use  include-meta  in front of some content to place it on the right side of the page. All the following content will go to the right side. At the start of a new section it will be reset. :include-open-api: snippets/open-api/uber.json {method: \"get\", path: \"/v1/estimates/time\"}\n:include-meta: {\"rightSide\": true}\n:include-json: two-sides/price-estimate.json\n"],["layout@@two-sides-tabs@@unified-tabs","Layout","Two Sides Tabs","Unified Tabs","In two sides layout tabs selection is moved to a single place (default is top right panel)."],["layout@@two-sides-tabs@@definition","Layout","Two Sides Tabs","Definition","To define multiple tabs we use fenced code block tabs\nJavaScript: :include-file: snippets/file-name.js\nJava: :include-file: snippets/WideCode.java \nCpp: :include-cpp: snippets/simple.cpp {entry: \u0027main\u0027, bodyOnly: true}\n\n This will generate a multi tab widget with an include plugin content per tab. Note: Selecting a tab will switch all the tabs on every page. JavaScript class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass Java class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n} Cpp "],["layout@@two-sides-tabs@@markdown-per-tab","Layout","Two Sides Tabs","Markdown Per Tab","Any valid markdown can be used in place of a content of each tab. Typical use case for  installation instructions : extract differences per language or environment tabs\nJavaScript: \nFirst you need to download WebStorm and then run following using your terminal\n\nbash\n$ yarn install\n$ yarn start\n\n    \nJava: \nFirst you need to download Intellij IDEA and then run following using your terminal\n    \nbash\n$ mvn install\n$ mvn exec:exec\n \n    \nCpp: \nFirst you need to download CLion and then run following using your terminal\n\nbash\n$ pwd\n$ whoamis\n\n\n JavaScript First you need to download WebStorm and then run following using your terminal $ yarn install\n$ yarn start\n Java First you need to download Intellij IDEA and then run following using your terminal $ mvn install\n$ mvn exec:exec\n Cpp First you need to download CLion and then run following using your terminal $ pwd\n$ whoamis\n"],["visuals@@smart-bullet-points@@types","Visuals","Smart Bullet Points","Types","Bullet points are an essential tool in the presentation of information. Frequent use of bullet points however may make documentation and presentation boring. You can change the way bullet points are rendered by using the  meta  plugin. :include-meta: {bulletListType: \"BulletsListType\"}\n\n* Testing\n* Design\n* Code Review\n* Documentation\n"],["visuals@@smart-bullet-points@@left-right-timeline","Visuals","Smart Bullet Points","Left Right Timeline","Use  LeftRightTimeLine  to outline your flow. This also splits related things by moving odd points to the left and even to the right. :include-meta: {bulletListType: \"LeftRightTimeLine\"}\n\n* Testing\n* Design\n* Code Review\n* Documentation\n Testing Design Code Review Documentation"],["visuals@@smart-bullet-points@@venn","Visuals","Smart Bullet Points","Venn","Use  Venn  to display overlapping relationships. Velocity Volume Variety"],["visuals@@smart-bullet-points@@steps","Visuals","Smart Bullet Points","Steps","Use  Steps  to outline a procedure. Install IDEA Learn Java Learn Machine Learning Use  differentColors: true  to use distinct colors for each step :include-meta: {bulletListType: \"Steps\", differentColors: true}\n Install IDEA Learn Java Learn Machine Learning"],["visuals@@smart-bullet-points@@presentation-only-type","Visuals","Smart Bullet Points","Presentation only type","If you want to change bullets type only for presentation use: :include-meta: {presentationBulletListType: \"BulletsListType\"}\n"],["visuals@@smart-bullet-points@@horizontalstripes","Visuals","Smart Bullet Points","HorizontalStripes","Following bullet points will be rendered as horizontal striped, but only in presentation mode. :include-meta: {presentationBulletListType: \"HorizontalStripes\"}\n Lessons Learned Future Plans Backup Strategy"],["visuals@@icons@@glyphicons","Visuals","Icons","Glyphicons","Icons can be included using the  inlined code plugin . icon:cloud\n The result will be appear inline in the current paragraph  Glyphicon\u0027s list of icons is available here:  http://getbootstrap.com/components/#glyphicons http://getbootstrap.com/components/#glyphicons"],["visuals@@icons@@bullet-points","Visuals","Icons","Bullet Points","Icons can also be used as bullet points replacement: * icon:time Time is important\n* icon:cog Setup must be easy\n  Time is important  Setup must be easy"],["visuals@@charts@@pie","Visuals","Charts","Pie","Given a  CSV  file... label, value\nA, 10\nB, 20\nC, 15\nD, 8 ..to build a pie chart use: :include-chart: data.csv {type: \"Pie\"}\n You can change the style with the  innerRadius  property: :include-chart: data.csv {type: \"Pie\", innerRadius: 100} \n"],["visuals@@charts@@bar","Visuals","Charts","Bar","To build a vertical bar chart use: :include-chart: data.csv\n To build a horizontal bar chart use: :include-chart: data.csv {horizontal: true}\n"],["visuals@@charts@@line","Visuals","Charts","Line","To build a line chart use: :include-chart: data.csv {type: \"Line\"}\n"],["visuals@@charts@@presentation-mode","Visuals","Charts","Presentation Mode","In presentation mode, chart values for  Bar  and  Pie  appear one at a time. To force all values to appear at once use :include-meta: {allAtOnce: true}\n"],["visuals@@charts@@victory-charts","Visuals","Charts","Victory Charts","MDoc uses  https://github.com/FormidableLabs/victory-chart VictoryChart  library to render charts."],["visuals@@images@@markdown","Visuals","Images","Markdown","Image can be included using standard Markdown syntax. ![alt text](regular-image.png)\n null alt text"],["visuals@@images@@extension","Visuals","Images","Extension","MDoc adds additional extension to provide additional information: caption annotations fit parameters"],["visuals@@images@@caption","Visuals","Images","Caption","To add a caption at the top of an image use: :include-image: castle.jpg {caption: \"Title of an image\"}\n To add a caption at the bottom of an image use: :include-image: castle.jpg {caption: \"Title of an image\", captionBottom: true}\n"],["visuals@@images@@fit","Visuals","Images","Fit","An unfitted image will occupy all available space: To fit the image to the width of a text use the  fit  parameter. :include-image: books.jpg {fit: true}\n"],["visuals@@images@@scale-ratio","Visuals","Images","Scale Ratio","To scale image up or down use  scaleRatio  option,  1  is default,  0.5  is half image size. :include-image: books.jpg {scaleRatio: 0.3}\n"],["visuals@@image-annotations@@complex-domain","Visuals","Image Annotations","Complex Domain","Not every UI can be as simple as one input box. Documenting and Presenting your UI should be a joy"],["visuals@@image-annotations@@annotated-images","Visuals","Image Annotations","Annotated Images","There are different types of annotations: Circles Rectangles Arrows etc. Annotations are stored as a simple  JSON  file. {\"shapes\": [{\"type\": \"arrow\", \"id\":\"a1\",\n  \"beginX\": 200, \"beginY\": 100, \"endX\": 48, \"endY\": 42,\n  \"color\": \"red\", \"text\": \"debug\"},\n\n  {\"type\": \"rectangle\", \"id\":\"r1\",\n    \"x\": 200, \"y\": 50, \"width\": 100, \"height\": 40,\n    \"color\": \"green\", \"text\": \"debug\"},\n\n  {\"type\": \"circle\", \"id\": \"c1\",\n    \"x\": 350, \"y\": 100, \"r\": 30,\n    \"color\": \"blue\", \"text\": \"text\"}]} These can then be easily integrated with documentation by using an  image  plugin. # Annotated Images\n\n:include-image: word-toolbar.jpg {annotationsPath: \u0027annotations1.json\u0027}\n\nThere are different types of annotations:\n* Circles\n* Rectangles\n* Arrows\n* etc."],["visuals@@image-annotations@@presentation-mode","Visuals","Image Annotations","Presentation Mode","Annotated images automatically participate in presentation mode. Annotations appear one by one and scale to match the zoom level of a presentation."],["visuals@@SVG@@retina-displays","Visuals","SVG","Retina Displays","To have crisp documentation images on Retina displays use  SVG  images. :include-svg: with-groups.svg\n"],["visuals@@SVG@@ids-to-reveal","Visuals","SVG","Ids To Reveal","If you have  groups  that you want to display while hiding everything else, pass the IDs to the  idsToReveal  property. :include-svg: with-groups.svg {idsToReveal: [\"partA\", \"partB\"]}\n In presentation mode, groups will be displayed one at a time in the order specified. This SVG image is taken and modified from  https://www.shareicon.net/pyramid-piramid-draw-stock-877888 https://www.shareicon.net/pyramid-piramid-draw-stock-877888 \u003c?xml version\u003d\"1.0\" ?\u003e\n\u003csvg version\u003d\"1.1\" viewBox\u003d\"0 0 512 512\" width\u003d\"256\" height\u003d\"256\"\n\t xml:space\u003d\"preserve\" xmlns\u003d\"http://www.w3.org/2000/svg\" xmlns:xlink\u003d\"http://www.w3.org/1999/xlink\"\u003e\n\t\u003cstyle type\u003d\"text/css\"\u003e\n\t\t.st0{fill:#5CB8CD;}\n\t\t.st1{fill:#FB8A52;}\n\t\t.st2{fill:#152D39;}\n\t\t.st3{fill:#E8E8E8;}\n\t\u003c/style\u003e\n\n\t\u003cg id\u003d\"partA\"\u003e\n\t\t\u003cpath class\u003d\"st2\" d\u003d\"M109.4,397.7c-0.8-3.8-0.4-7.9,1.4-11.8l127.9-279.4c2.3-5.1,6.4-8.5,11-10.1V6\n\t\t\tc-4.6,1.6-8.6,4.9-11,10.1L52.1,423.6c-1.9,4.1-2.2,8.3-1.3,12.2L109.4,397.7z\" /\u003e\n\t\t\u003cpath class\u003d\"st2\" d\u003d\"M160.4,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4\n\t\t S204.2,325.4,160.4,325.4z\" /\u003e\n\t\t\u003ccircle class\u003d\"st3\" cx\u003d\"160.4\" cy\u003d\"246\"  r\u003d\"68.1\"/\u003e\n\t\t\u003cpath class\u003d\"st2\" d\u003d\"M168.2,253.3h-11.3l-2.7,7.8H150l10.9-30.1h3.5l10.6,30.1h-4.2L168.2,253.3z M158,249.9h9l-4.4-12.9h-0.1\n\t\t L158,249.9z\"/\u003e\n\t\u003c/g\u003e\n\n\t\u003cg id\u003d\"partC\"\u003e\n\t\t\u003cpath class\u003d\"st1\" d\u003d\"M394.8,409.5c-3,2.1-6.8,3.4-10.9,3.4H128.1c-4.7,0-8.9-1.6-12.1-4.3l-58.3,37.9\n\t\t\tc3.2,2.5,7.2,4,11.8,4h373.1c4,0,7.6-1.2,10.5-3.2L394.8,409.5z\" /\u003e\n\t\t\u003cpath class\u003d\"st1\" d\u003d\"M262.4,506c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4\n\t\t S306.1,506,262.4,506z\" /\u003e\n\t\t\u003ccircle class\u003d\"st3\" cx\u003d\"262.4\" cy\u003d\"426.6\" id\u003d\"XMLID_7_\" r\u003d\"68.1\"/\u003e\n\t\t\u003cpath class\u003d\"st1\" d\u003d\"M274.8,432.6l0,0.1c0.1,3.1-1,5.7-3.3,7.8c-2.3,2.1-5.2,3.2-8.9,3.2c-3.8,0-6.8-1.3-9.2-4\n\t\tc-2.4-2.7-3.6-6.1-3.6-10.2v-5.9c0-4.1,1.2-7.5,3.6-10.2c2.4-2.7,5.4-4,9.2-4c3.8,0,6.8,1,9,3c2.2,2,3.3,4.7,3.2,8l0,0.1h-4.3\n\t\tc0-2.3-0.7-4.2-2.1-5.5c-1.4-1.4-3.3-2-5.8-2c-2.5,0-4.5,1-6,3c-1.5,2-2.2,4.5-2.2,7.5v6c0,3,0.7,5.6,2.2,7.6c1.5,2,3.5,3,6,3\n\t\t  c2.5,0,4.4-0.7,5.8-2c1.4-1.3,2.1-3.2,2.1-5.6H274.8z\"/\u003e\n\t\u003c/g\u003e\n\n\t\u003cg id\u003d\"partB\"\u003e\n\t\t\u003cpath class\u003d\"st0\" d\u003d\"M262.4,96.5c4.6,1.6,8.6,4.9,11,10.1l127.9,279.4c2,4.4,2.2,9.1,1,13.2l58.5,38.1\n\t\t\tc1.4-4.3,1.2-9.1-0.9-13.6L273.4,16.1c-2.3-5.1-6.4-8.5-11-10.1V96.5z\"/\u003e\n\t\t\u003cpath class\u003d\"st0\" d\u003d\"M364.3,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4\n\t\t S408.1,325.4,364.3,325.4z\" /\u003e\n\t\t\u003ccircle class\u003d\"st3\" cx\u003d\"364.3\" cy\u003d\"246\" id\u003d\"XMLID_9_\" r\u003d\"68.1\"/\u003e\n\t\t\u003cpath class\u003d\"st0\" d\u003d\"M352.7,263.2v-34.4h11.2c3.6,0,6.4,0.8,8.4,2.3c2,1.6,3,3.9,3,7c0,1.5-0.5,2.8-1.4,4c-0.9,1.2-2.1,2.1-3.6,2.7\n\t\t c2.3,0.3,4,1.3,5.3,2.9c1.3,1.6,2,3.6,2,5.8c0,3.1-1,5.6-3.1,7.2c-2,1.7-4.8,2.5-8.3,2.5H352.7z M357.3,243.4h7.5\n\t\t  c1.7,0,3.1-0.5,4.2-1.4c1.1-1,1.6-2.3,1.6-4c0-1.9-0.6-3.2-1.8-4.2c-1.2-0.9-2.9-1.4-5.1-1.4h-6.6V243.4z M357.3,247.1v12.5h9\n\t\t    c2.1,0,3.8-0.5,4.9-1.6c1.2-1,1.8-2.5,1.8-4.5c0-1.9-0.6-3.4-1.8-4.6c-1.2-1.2-2.8-1.8-4.8-1.9h-0.3H357.3z\"/\u003e\n\t\u003c/g\u003e\n\u003c/svg\u003e"],["visuals@@flow-diagrams@@nodes-and-edges","Visuals","Flow Diagrams","Nodes and Edges","Specify a  JSON  file to define a flow chart. {\n  \"nodes\": [\n    {\n      \"id\": \"n1\",\n      \"label\": \"input one\"\n    },\n    {\n      \"id\": \"n2\",\n      \"label\": \"input two\"\n    },\n    {\n      \"id\": \"n3\",\n      \"label\": \"processor\"\n    },\n    {\n      \"id\": \"n4\",\n      \"label\": \"output one\"\n    },\n    {\n      \"id\": \"n5\",\n      \"label\": \"output two\"\n    },\n    {\n      \"id\": \"n6\",\n      \"label\": \"output three\"\n    }\n  ],\n  \"edges\": [\n    [\"n1\", \"n3\"],\n    [\"n2\", \"n3\"],\n    [\"n3\", \"n4\"],\n    [\"n3\", \"n5\"],\n    [\"n3\", \"n6\"]\n  ]\n} At minimum,  nodes  and  edges  must be provided. :include-flow-chart: simple-dag.json\n"],["visuals@@flow-diagrams@@highlight","Visuals","Flow Diagrams","Highlight","{\n  \"nodes\": [\n    {\n      \"id\": \"n1\",\n      \"label\": \"label 1\"\n    },\n    {\n      \"id\": \"n2\",\n      \"label\": \"label 2\",\n      \"highlight\": true\n    },\n    {\n      \"id\": \"n3\",\n      \"label\": \"label 3\"\n    }\n  ],\n  \"edges\": [\n    [\"n1\", \"n2\"],\n    [\"n2\", \"n3\"],\n    [\"n1\", \"n3\"]\n  ]\n} Use  highlight  to highlight a node. Or use  highlight  property of a  flow-chart  include plugin. :include-flow-chart: simple-dag.json {highlight: \"n3\"}\n Note: To highlight more than one element use  {highlight: [\"n3\", \"n4\"]}"],["visuals@@flow-diagrams@@presentation","Visuals","Flow Diagrams","Presentation","In presentation mode nodes will be highlighted one at a time. To force all highlights to appear at once add this before (either in the same section, or at the start of a document). :include-meta: {allAtOnce: true}\n"],["visuals@@flow-diagrams@@vertical-layout","Visuals","Flow Diagrams","Vertical Layout","To switch layout from horizontal to vertical use  vertical: true ."],["visuals@@flow-diagrams@@links","Visuals","Flow Diagrams","Links","To attach links to nodes use  url  property. Combine links and highlights to create a sub navigation for your product. {\n  \"nodes\": [\n    {\n      \"id\": \"n1\",\n      \"label\": \"No Link\"\n    },\n    {\n      \"id\": \"n2\",\n      \"label\": \"Link To Java\",\n      \"url\": \"features/java\"\n    },\n    {\n      \"id\": \"n3\",\n      \"label\": \"Link to External\",\n      \"url\": \"http://commonmark.org\"\n    }\n  ],\n  \"edges\": [\n    [\"n1\", \"n2\"],\n    [\"n3\", \"n2\"]\n  ]\n}"],["visuals@@PlantUml@@in-place","Visuals","PlantUml","In Place","http://plantuml.com/sequence-diagram PlantUml  is a text-based way of drawing many kinds of diagrams."],["visuals@@PlantUml@@external-file","Visuals","PlantUml","External file","If your diagram is stored in a separate file, use  :include-plantuml: \u003cpath\u003e . :include-plantuml: demo.plantuml\n @startuml\n\npackage \"Some Group\" {\n  HTTP - [First Component]\n  [Another Component]\n}\n\nnode \"Other Groups\" {\n  FTP - [Second Component]\n  [First Component] --\u003e FTP\n}\n\ncloud {\n  [Example 1]\n}\n\n\ndatabase \"MySql\" {\n  folder \"This is my folder\" {\n    [Folder 3]\n  }\n  frame \"Foo\" {\n    [Frame 4]\n  }\n}\n\n[Another Component] --\u003e [Example 1]\n[Example 1] --\u003e [Folder 3]\n[Folder 3] --\u003e [Frame 4]\n\n@enduml "],["deployment@@workflows@@direct-deployment","Deployment","Workflows","Direct Deployment","MDoc currently supports two deployment workflows:  deployment/workflows#direct-deployment direct deployment  and  deployment/workflows#auto-deployment-from-the-monorepo auto-deployment from the monorepo . Upload Documentation To build and publish MDoc documentation, which is hosted by  deployment/TS-guides TS Guides , run this command in your documentation directory: mdoc --upload --doc-id \u003cyour-doc-id\u003e Warning: Before initial deploy, verify your  doc-id  is not in use by another user by  navigating to the TS Guides URL for your  doc-id  string (https://tsguides.app.twosigma.com/ doc-id ). The command will output a URL for your documentation, where you can verify the upload was successful. Register Documentation in CMDB Follow the steps under  deployment/registration Registration ."],["deployment@@workflows@@auto-deployment-from-the-monorepo","Deployment","Workflows","Auto-Deployment from the Monorepo","If your documentation lives in the monorepo (i.e., VATS), you can have your documentation auto-deploy on push. To make use of this workflow, do the following: Create Documentation Codebase Create a new codebase for your documentatiomn and, in its  software.mi , add dependencies to  ts_testing_documenting  and any other codebases that you might reference in your docs. Configure Makefile Modify your new codebase\u0027s top-level Makefile to include MDoc references and define a doc-id: Warning: Before initial deploy, verify your  doc-id  is not in use by another user by  navigating to the TS Guides URL for your  doc-id  string (https://tsguides.app.twosigma.com/ doc-id ). TOP :\u003d .\nTOOLS :\u003d $(shell /usr/libexec/gettools ${TOP})\n\nPROJECTS :\u003d bin\n\nTS_MDOC_HOME :\u003d $(shell ${TOOLS}/bin/buildpath -H ts_testing_documenting)\n\ninclude ${TOOLS}/mk/ts.master.nr.mk\n\n.PHONY: mdoc\n\nmdoc:\n    ${TS_MDOC_HOME}/bin/mdoc --doc-id \u003cadd-your-doc-id-here\u003e --source mdoc --deploy dist/mdoc\n\nmdoc_clean:\n    ${_RMRF} ${TOP}/dist/mdoc\n\nall: mdoc\nclean: mdoc_clean If your documentation will pull in files and code snippets from other codebases in the monorepo, also define and add the codebases to your documentation\u0027s lookup-path file in the Makefile: TOP :\u003d .\nTOOLS :\u003d $(shell /usr/libexec/gettools ${TOP})\n\nPROJECTS :\u003d bin\n\nTS_MDOC_HOME :\u003d $(shell ${TOOLS}/bin/buildpath -H ts_testing_documenting)\n\n# codebases referenced in my documentation\nTS_CODEBASE_ONE :\u003d $(shell ${TOOLS}/bin/buildpath -H ts_codebase_one)\nTS_CODEBASE_TWO :\u003d $(shell ${TOOLS}/bin/buildpath -H ts_codebase_two)\nTS_CODEBASE_THREE :\u003d $(shell ${TOOLS}/bin/buildpath -H ts_codebase_three)\n\ninclude ${TOOLS}/mk/ts.master.nr.mk\n\n.PHONY: mdoc\n\nmdoc:\n    echo ${TS_CODEBASE_ONE}/java/src \u003e mdoc/lookup-paths\n    echo ${TS_CODEBASE_TWO}/java/src \u003e\u003e mdoc/lookup-paths\n    echo ${TS_CODEBASE_THREE}/java/src \u003e\u003e mdoc/lookup-paths\n    ${TS_MDOC_HOME}/bin/mdoc --doc-id \u003cadd-your-doc-id-here\u003e --source mdoc --deploy dist/mdoc\n\nmdoc_clean:\n    ${_RMRF} ${TOP}/dist/mdoc\n\nall: mdoc\nclean: mdoc_clean Note: In addition to allowing you to pull in artifacts from other codebases, referencing these dependencies in your Makefile validates the accuracy of your docs against these codebases at build time.  If you want these benefits without auto-deploying on push, simply remove  --deploy dist/mdoc  from  ${TS_MDOC_HOME}/bin/mdoc --doc-id \u003cadd-your-doc-id-here\u003e --source mdoc --deploy dist/mdoc  in your Makefile. Add Codebase to CMDB Registry Complete the steps under  deployment/registration Registration , being sure to add your codebase name (e.g.,  ts_my_codebase_name ) to the optional field  ts_documentation_vats_codebase_name ."],["deployment@@registration@@register-documentation-in-cmdb","Deployment","Registration","Register Documentation in CMDB","Warning: Documentation must be registered in CMDB or it will be deleted from the database after a week. Only documentation meant to be ephemeral (e.g., for purposes of a code review) should go unregistered. To register, create a new  https://cmdb.twosigma.com/entity_types/ts_documentation ts_documentation entity in CMDB Provide your unique doc-id in the first field, \"Ts documentation.\" Optional : If you are deploying from VATS, add your codebase name in the optional field \"Ts documentation vats codebase name.\" Otherwise, skip this step. Note: If you have this codebase attribute set, you cannot use  deployment/workflows direct deployment  ( mdoc --upload ). Choose a documentation type ( mdoc  or  sphinx ) for \"Ts documentation type.\" Provide easy-to-read display title for \"Ts documentation title.\" Provide content category for \"Ts documentation category\" (see  https://tsguides.app.twosigma.com TS Guide landing page  for existing categories). Provide a short description of your documentation for \"Ts documentation description.\" Check the box for \"Ts documentation display on landing\" if you want your entry to appear on the  https://tsguides.app.twosigma.com TS Guide landing page . Note: In addition to ensuring that your documentation persists, registering in CMDB is necessary for content indexing by federated search."],["deployment@@TS-guides@@hosting-solution","Deployment","TS Guides","Hosting Solution","MDoc documentation is deployed via TS Guides, which offers a centralized hosting solution for user documentation. In addition to providing hosting, TS Guides offers: https://tsguides.app.twosigma.com Centralized landing page  where authors can optionally display their documentation by category with a short description. Automatic indexing for Two Sigma\u0027s  https://search.app.twosigma.com federated search  under the User Guides collection."],["deployment@@TS-guides@@sphinx-documentation","Deployment","TS Guides","Sphinx Documentation","TS Guides also supports documentation created with Sphinx. Sphinx documentation can be deployed in two ways, similar to the  deployment/workflows MDoc deployment options , either by direct deployment or automatically from the monorepo. Direct Deployment Deploy Sphinx docs to TS Guides directly using the  tsguides  CLI tool: 1. Select doc-id for documentation Choose a simple and human-readable string using URL-safe characters for your  doc-id , and verify it is not already in use by navigating to the TS Guides URL for your  doc-id  string (i.e., https://tsguides.app.twosigma.com/ doc-id ). 2.  Upload documentation files Run the following command: tsguides --upload --doc-id \u003cyour-doc-id\u003e --path \u003cpath/to/built/html\u003e The  tsguides  command will output a URL. Navigate to this URL and verify that your documentation was successfully uploaded. 3.  Register documentation Follow the steps for  deployment/registration registering your documentation  in CMDB. Auto-Deployment from Monorepo If your Sphinx docs are in the monorepo (i.e., VATS) you can have them automatically update when a change is pushed. 1. Select doc-id for documentation Choose a simple and human-readable string using URL-safe characters for your  doc-id , and verify it is not already in use by navigating to the TS Guides URL for your  doc-id  string (i.e., https://tsguides.app.twosigma.com/ doc-id ). 2.  Register documentation Using this  doc-id , follow the steps for  deployment/registration registering your documentation in CMDB , being sure to add your codebase name (e.g.,  ts_my_codebase_name ) to the optional field  ts_documentation_vats_codebase_name ."],["synergy-with-testing@@java@@table-data","Synergy With Testing","Java","Table Data","Your business logic tests can greatly improve maintainability of your documentation. The example below tests what account types are allowed to perform  Trading Activities . package com.twosigma.testing.documentation\n\nimport com.twosigma.documentation.DocumentationArtifacts\nimport com.twosigma.testing.data.table.TableData\nimport org.junit.Test\n\nclass TestToDocExample {\n    @Test\n    void shouldRestrictAccountsActivity() {\n        def rules \u003d [\"Account Type\" | \"Operation\"    | \"Restriction\"] {\n                    _________________________________________________\n                        \"SPB3\"      | \"Buy Options\"  | \"weekends only\"\n                        \"TR\"        | \"Sell Futures\" | \"except holidays\"\n                        \"BOSS\"      | \"Buy Stocks\"   | \"none\" }\n\n        validateRules(rules)\n    }\n\n    private static void validateRules(TableData rules) {\n        DocumentationArtifacts.create(TestToDocExample,\n                \"account-rules.json\", rules.toJson())\n    }\n} As part of validation of account types, the test also captures data that was used for testing. We can refer to this data later in our documentation by using the  layout/tables include-table  plugin :include-table: account-rules.json\n Your test data and user-facing documentation is now linked. Account Type Operation Restriction SPB3 Buy Options weekends only TR Sell Futures except holidays BOSS Buy Stocks none"],["synergy-with-testing@@REST@@request-and-response-capture","Synergy With Testing","REST","Request and Response Capture","It helps in understanding a REST API if there are clear scenarios defined. Showing examples of requests used and responses received makes your documentation less abstract. Instead of manually copy-and-pasting the responses back to your documentation, consider running tests and automatically capturing the relevant artifacts."],["synergy-with-testing@@REST@@webtau","Synergy With Testing","REST","WebTau","http://mdoc.app.twosigma.com/webtau/REST/getting-started WebTau  is the framework to write, run, and capture REST tests artifacts. The bare minimum test in WebTau looks like this: package rest\n\nimport static com.twosigma.testing.webtau.WebTauGroovyDsl.*\n\nscenario(\"simple get\") {\n    http.get(\"/weather\") {\n        temperature.should \u003d\u003d 88\n    }\n}"],["synergy-with-testing@@REST@@capture-rest-artifacts","Synergy With Testing","REST","Capture REST Artifacts","To capture artifacts use  http.doc.capture package rest\n\nimport static com.twosigma.testing.webtau.WebTauGroovyDsl.*\n\nscenario(\"extracting id after POST to use inside GET request\") {\n    def id \u003d http.post(\"/employee\", [firstName: \u0027FN\u0027, lastName: \u0027LN\u0027]) {\n        return id\n    }\n    http.doc.capture(\u0027employee-post\u0027)\n\n    http.get(\"/employee/$id\") {\n        firstName.should \u003d\u003d \u0027FN\u0027\n        lastName.should \u003d\u003d \u0027LN\u0027\n    }\n    http.doc.capture(\u0027employee-get\u0027) // capture previous HTTP call as \u003cdocDir\u003e/employee-get\n} Captured artifact is a  JSON  file that looks like this: {\n  \"method\": \"GET\",\n  \"url\": \"http://localhost:8180/employee/id-generated-2\",\n  \"responseType\": \"application/json\",\n  \"responseBody\": \"{\\\"firstName\\\":\\\"FN\\\",\\\"lastName\\\":\\\"LN\\\"}\\n\",\n  \"responseBodyChecks\": {\n    \"failedPaths\": [],\n    \"passedPaths\": [\n      \"root.firstName\",\n      \"root.lastName\"\n    ]\n  }\n}"],["synergy-with-testing@@REST@@document-rest-calls","Synergy With Testing","REST","Document REST calls","Once the artifact is captured, include it for documentation with the  rest-test  plugin. :include-rest-test: REST/employee-get.json\n The result looks like: or: Note: all the asserted values will be automatically highlighted for your users to help you bring their attention to values of interest."],["synergy-with-testing@@web-UI@@auto-annotations","Synergy With Testing","Web UI","Auto Annotations","How to annotate images using the  include-image  plugin  visuals/image-annotations was covered previously  . Now let\u0027s automate the screenshot and annotations assignment process. PageElement signIn \u003d $(\"#gb_70\");\nPageElement input \u003d $(\".gsfi\");\nPageElement search \u003d $(\"[name\u003d\u0027btnK\u0027]\");\n\nopen(\"http://google.com\");\n\ndoc.withAnnotations(\n        badge(signIn),\n        highlighter(input).withColor(\"green\"),\n        arrow(search, \"Click This\").withColor(\"yellow\")).capture(\"test\"); Example above is using a Selenium-based framework to automatically take a screenshot and retrieve annotations positions. Once we have the information we can include the annotated image in our documentation. :include-image: test.png {annotationsPath: \u0027test.json\u0027}\n The result is below:"],["configuration@@basic@@favicon","Configuration","Basic","Favicon","Put a  favicon.png  file inside the root of your docs (next to your  toc  file)"]]

window.mdocSearchIdx = lunr(function () {
    this.ref('id')
    this.field('section')
    this.field('pageTitle')
    this.field('pageSection')
    this.field('text')

    this.metadataWhitelist = ['position']

    window.mdocSearchData.forEach(function (e) {
        this.add({
            id: e[0],
            section: e[1],
            pageTitle: e[2],
            pageSection: e[3],
            text: e[4],
        })
    }, this)
})