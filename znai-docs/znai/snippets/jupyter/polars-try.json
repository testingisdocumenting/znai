{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "63c7104b-4d2c-4c3c-8e3b-3f8195bbce86",
   "metadata": {},
   "source": [
    "## section of important\n",
    "\n",
    "some *text* here and **there**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80271c63-aaf7-40e2-85fe-511fbac5bed0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "nice bullets\n",
    "* one line\n",
    "* two lines\n",
    "* yes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3c1b6c3-ce59-401a-b7ed-0b42109c847a",
   "metadata": {},
   "source": [
    "## Examples Go here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b6f5518-15c8-4fb8-a0a4-a9be38bdffa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib is building the font cache; this may take a moment.\n"
     ]
    }
   ],
   "source": [
    "import polars as pl \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a sample CSV file for demonstration\n",
    "with open(\"data.csv\", \"w\") as f:\n",
    "    f.write(\"col1,col2,col3\\n\")\n",
    "    f.write(\"A,10,X\\n\")\n",
    "    f.write(\"B,20,Y\\n\")\n",
    "    f.write(\"A,30,Z\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "593826eb-5114-4b8c-bf6e-424d75a7bb03",
   "metadata": {},
   "outputs": [],
   "source": [
    "lf = (\n",
    "    pl.scan_csv(\"data.csv\")\n",
    "    .filter(pl.col(\"col1\") == \"A\")\n",
    "    .select(\"col2\", \"col3\")\n",
    "    .group_by(\"col3\")\n",
    "    .agg(pl.col(\"col2\").sum().alias(\"sum_col2\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bec88a31-2d87-4756-9692-23727bd7e9cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h4>NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 13.0.1 (20250615.1724)\n",
       " -->\n",
       "<!-- Title: polars_query Pages: 1 -->\n",
       "<svg width=\"362pt\" height=\"290pt\"\n",
       " viewBox=\"0.00 0.00 362.00 290.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 286.25)\">\n",
       "<title>polars_query</title>\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-286.25 358.25,-286.25 358.25,4 -4,4\"/>\n",
       "<!-- p2 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>p2</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"205.75,-186.5 148.5,-186.5 148.5,-150.5 205.75,-150.5 205.75,-186.5\"/>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-163.82\" font-family=\"Monospace\" font-size=\"14.00\">π 2/2</text>\n",
       "</g>\n",
       "<!-- p1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>p1</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"354.25,-282.25 0,-282.25 0,-222.5 354.25,-222.5 354.25,-282.25\"/>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-264.95\" font-family=\"Monospace\" font-size=\"14.00\">AGG [col(&quot;col2&quot;).sum().alias(&quot;sum_col2&quot;)]</text>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-247.7\" font-family=\"Monospace\" font-size=\"14.00\">BY</text>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-230.45\" font-family=\"Monospace\" font-size=\"14.00\">[col(&quot;col3&quot;)]</text>\n",
       "</g>\n",
       "<!-- p2&#45;&gt;p1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>p2&#45;&gt;p1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M177.12,-186.86C177.12,-193.9 177.12,-202.34 177.12,-210.77\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"173.63,-210.6 177.13,-220.6 180.63,-210.6 173.63,-210.6\"/>\n",
       "</g>\n",
       "<!-- p3 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>p3</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"325.38,-114.5 28.88,-114.5 28.88,-78.5 325.38,-78.5 325.38,-114.5\"/>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-91.83\" font-family=\"Monospace\" font-size=\"14.00\">FILTER BY [(col(&quot;col1&quot;)) == (&quot;A&quot;)]</text>\n",
       "</g>\n",
       "<!-- p3&#45;&gt;p2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>p3&#45;&gt;p2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M177.12,-114.8C177.12,-122.09 177.12,-130.77 177.12,-138.96\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"173.63,-138.88 177.13,-148.88 180.63,-138.88 173.63,-138.88\"/>\n",
       "</g>\n",
       "<!-- p4 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>p4</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"263.5,-42.5 90.75,-42.5 90.75,0 263.5,0 263.5,-42.5\"/>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-25.2\" font-family=\"Monospace\" font-size=\"14.00\">Csv SCAN [data.csv]</text>\n",
       "<text xml:space=\"preserve\" text-anchor=\"middle\" x=\"177.12\" y=\"-7.95\" font-family=\"Monospace\" font-size=\"14.00\">π */3;</text>\n",
       "</g>\n",
       "<!-- p4&#45;&gt;p3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>p4&#45;&gt;p3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M177.12,-42.65C177.12,-50.16 177.12,-58.81 177.12,-66.91\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"173.63,-66.67 177.13,-76.67 180.63,-66.67 173.63,-66.67\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<LazyFrame at 0x112C6A520>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96cb299f-bca1-46cb-ae90-a73f4df4d038",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6fdde1d4-d5ca-4ec0-92c7-fe3fbce95cdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>col3</th><th>sum_col2</th></tr><tr><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;X&quot;</td><td>10</td></tr><tr><td>&quot;Z&quot;</td><td>30</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2, 2)\n",
       "┌──────┬──────────┐\n",
       "│ col3 ┆ sum_col2 │\n",
       "│ ---  ┆ ---      │\n",
       "│ str  ┆ i64      │\n",
       "╞══════╪══════════╡\n",
       "│ X    ┆ 10       │\n",
       "│ Z    ┆ 30       │\n",
       "└──────┴──────────┘"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = lf.collect()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f44cca7-c929-4d30-bad6-a0b7449cf021",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0886fc76-d080-4ef8-812c-17b9053907bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col3</th>\n",
       "      <th>sum_col2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Z</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  col3  sum_col2\n",
       "0    X        10\n",
       "1    Z        30"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df = df.to_pandas()\n",
    "pandas_df  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d38f22e5-c620-4b4b-b723-8aa4ddb595b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(pandas_df[\"col3\"], pandas_df[\"sum_col2\"])\n",
    "plt.xlabel(\"Column 3\")\n",
    "plt.ylabel(\"Sum\")\n",
    "plt.title(\"Scatter Plot of Polars Data\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57a546d8-cad7-4895-b1f0-55e79d1b0927",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
