"Znai" full guide:

# Introduction -> What Is This

## Beautiful and Maintainable User Guide

`Znai` combines human written text with artifacts such as `code`, `graphs`, `REST API`, `Java Docs`, `Doxygen`, etc. to create up-to-date, maintainable, beautiful **User Guides** and **Tutorials**.



## Extensive Plugins System

`Znai` extends markdown with plugins system to supercharge visuals and maintainability. Three categories of plugins are available for usage and creation

#### Include

```markdown
:include-json: example.json {
  title: "JSON example",
  highlightValue: ["root.person.id"],
  collapsedPaths: ["root.details"]
}
```


```markdown
:include-java: ../java/HelloWorld.java {
  entry: "sampleMethod", 
  bodyOnly: true,
  commentsType: "inline"
}
```


#### Inlined Code

```markdown
It is a `:icon: cloud` day, `:icon: clock` is ticking
```

It is a  day,  is ticking

#### Fenced Block

```markdown
```tabs
C++: 
    content of C++ tab
Java:
    content of Java tab
Python:
    content of Python tab
```
```


## Rich Visuals

Leverage multiple out-of-the box plugins to render charts, flow diagrams, annotated images, dynamic SVGs, etc



## Dark/Light Runtime Mode

Generate one documentation and let your users switch Dark/Light theme at runtime


## Two Sides Page Layout

Use [two sides]() layout option to render examples and supporting information side by side with convenient examples language switch


## Local Search

Local search with preview and instant navigation to the result


## Auto Presentation

With a click of a button, `Znai` turns **User Guide** content to presentation slides. Single source of truth and minimal effort.

Present a feature in a meeting and then share the same content as a link to the documentation.


## Batteries Included

Znai comes with

- Markdown with custom extensions and dozens of plugins:
- Content from external files with markers and filters support
- Simplified extraction of a function body content (working with examples)
- Embedding of JavaDoc/PyDoc documentation text, preserving styles
- Beautiful API documentation capabilities
- Two Sides Page Layout with convenient examples language switch
- Rich visuals like flow diagrams and charts
- etc

- Dev server mode with changes highlight and auto-jump to a change

- Local search (with full preview)

- Dark/light mode runtime switch

- Presentation Mode to automatically turn your documentation into slides, using the same content



# Introduction -> Getting Started

## Markdown

The fastest way to learn Markdown is to go to [CommonMark]() website and go through a 60 second cheatsheet or 10 minute tutorial.

## Running Znai

Znai is available as

- [Command Line]()
- [Maven Plugin]()

Both command line and maven plugin lets you to build documentation website and also run preview server during documentation writing process.

## Command Line


## Maven Plugin


Note: consider adding a separate module for documentation in the multi module maven project

## Scaffolding

To create a minimum set of files for your documentation execute


```
znai    
   |--chapter-one
             |--page-one.md
             |--page-two.md
   |--chapter-two
             |--page-three.md
             |--page-four.md
   |--toc
   |--lookup-paths
   |--meta.json
```

Listed above directories and files will be generated in the current directory.

## Preview Mode

Znai comes with `preview` mode. In `preview` mode, znai monitors changes you apply to the documentation files and notifies browser to navigates to the right page and highlights the changes.

To start preview mode, navigate to the documentation directory (`znai` if you used scaffold) and run


Open URL output by the command and open in a browser. Blue *eye* icon in the top right corner indicates that preview is on.

Open any text editor, modify and save a markdown file. Changes will be reflected in the browser.

## Static Site Generation

To build static documentation site you need to provide `documentation id`. Documentation id becomes part of your url and is also used inside generated HTMLs to reference static resources using absolute path.

For example, znai original documentation is hosted on [https://testingisdocumenting.org/znai]() and documentation id is `znai`.

This original page is hosted on [https://testingisdocumenting.org/znai/introduction/getting-started](). znai generates each page as index.html and puts inside directories to make it possible to have an extension less urls.

To make it easier to handle static resources loading, Znai builds all the urls inside HTML pages using absolute locations, and that's why it is required to provide `documentation id` during the site generation.

To generate static site, use


## GitHub Pages

To deploy to [GitHub Pages]() use [GitHub Pages Action]().

Here is an example of znai publishing its documentation to github pages


## On-site Central Hub Deployment

Znai has enterprise mode that lets you run Documentation hub inside your organization. It is completely free and open sourced.

Please create a [GitHub Issue]() if you want to try it out. I don't document it yet as I only have a couple of scenarios I tried it on, and I need more input.



# Flow -> Structure

## Building Blocks

`Znai` has three levels of documentation organization:

- Chapters
- Pages
- Page Sections

`Znai` encourages authors to split their content across multiple pages.

If you feel like you need to use nested headings, consider moving your content hierarchy one level up:

- Split overlong page into multiple ones
- Introduce chapters
- Focus on one thing at a time

## Similarity with OOP

It may be useful to compare documentation design to an object-oriented programming approach:

- Chapters as `packages`
- Pages as `classes`
- Page Sections as `methods`

It is a bad practice to have a class with loosely related methods. Similarly, it is a bad practice to have a long page with loosely related sections.

## Table of Contents

Each documentation must have `toc` file in its root. This file contains chapters and pages.

This is a `toc` file for this documentation.


Take a look at the left side bar and compare it with the file content.

The top entry, `introduction`, corresponds to the directory of the same name. The nested entry, `rationale`, corresponds to the file `rationale.md`.

## Pages Without Chapters

You can define TOC without having chapters. Specify file names with extension without adding any indentation:

```
page-one.md
page-two.md
optional-chapter
   page-three.md
   page-four.md
```

## Sub Headings

Only a first level heading is treated as a first class citizen:

- Part of **TOC**
- Smallest unit of **search result**

```
# First Class Citizen
```

Nested sub headings only add visual distinction within a page.

```
## Sub heading
content of sub heading

### Sub Sub heading
content of sub sub heading
```

### Sub heading

content of sub heading

#### Sub Sub heading

content of sub sub heading

## Heading Allowed Content

Keep headings text simple and short.

Try to avoid putting extra formatting into headings: inconsistent heading look and feel can feel distracting.

Note: Only inlined code and Links are allowed as part of the heading content. Consider sticking to a regular text.

## Meta

Each documentation must have the `meta.json` file in its root. This `JSON` file contains documentation display name, type, and optional `View On` information.




# Flow -> Landing

## Optional Index Landing Page

Optional `index.md` file in the root is your landing page. Consider putting logos and high level information about your product there.

Note: Landing page is not part of your Table Of Contents and is not present on navigation panel. Don't put essential information there as users may not get back there often.

## Auto Redirect

Use `include-redirect` plugin to automatically redirect from index page to any other page in your docs.

```markdown
:include-redirect: chapter/page
```

Use it if you don't know what to put on Landing Page or find yourself repeating the content in your next introduction page.

If `index.md` is not present, users will be redirected to the first page in your Table Of Contents.



# Flow -> Page Titles

## Automatic Names

By default, page names are automatically derived from file names. `file-name.md` has the page title `File Name`.

## Name Overrides

To override the default, add the following syntax to the top of your Markdown file:

```
---
title: Custom Name
---
```

To keep things easy for future documentation owners, it's good practice to keep page and file names the same. In some cases, however, you want to make exceptions, for example, in cases where you:

- Need to use special characters in title
- Want to avoid auto-capitalization

Another way to override a page title is by adding a `title` to `toc` file

```text
chapter-one
    structure {title: "Underlying Structure"} 
    setup
```

Note: Title defined in `toc` takes precedence over `title` inside markup file

## Chapter Names

By default, a chapter name is derived from dir name. Dir name `my-chapter` becomes `My Chapter` chapter name.

To override a chapter name, use `{title: "chapter title"}` inside `toc` file

```text
chapter-one {title: "Chapter ONE explicit"} 
    structure
    setup
```



# Flow -> Page References

## Follow the Order

Good documentation flows naturally. Links to navigate to the next page are at the end of each page.

Create links to remind users of *essential* concepts introduced previously. There is a good chance that a reader skipped over these or forgot about them.

Avoid: links that navigate users forward. It may break the flow of a documentation.

## Links

To create an `external` link use:

```markdown
[Link Title](http://external/reference)
```

To refer `internal` page within your documentation use:

```markdown
[internal link](../dir-name/file-name.md#optional-page-section-id)
[internal link](./file-name.md#optional-page-section-id)
[internal link](dir-name/file-name#optional-page-section-id)
```

Note: you can get `page-section-id` by hovering over a section title and pressing link icon. Your browser URL display the updated link.

### Links to Subsection

Linking to subsections is the same as linking to a top level section. [Here is an  example]()

```markdown
[Here is an example](flow/page-references#links-links-to-subsection)
```

Use [Subsection Shortcut]() if a subsection is within the same page:

```markdown
[Subsection Shortcut](#links)
```

### Index Page

Clicking this [index page]() link will have the same effect as clicking the documentation title at the top of the **Navigation Panel**

To refer back to the top-level `index` page use:

```markdown
[index page](/)
[index page](/#link-to-subsection)
```

## Downloads

Linking to a local file will deploy the file along with the generated documentation. Clicking the link will open a file using the browser's default method.

```
Download [test json file](data/test.json)
```

Download [test json file]()

## Custom Anchor Id

Use `{#anchori-id}` after section title to set a custom anchor:

```markdown
## Section With Custom Anchor {#my-custom-id}
```

### Section With Custom Anchor

## Validation

Local links are automatically validated during documentation build time. You will get a build time error if you refer to a page or a section/sub-section that does not exist.

Pass `--validate-external-links` to enable external links validation.



# Flow -> Page Toc

Use `include-page-toc` to include page top level sections as links

```markdown
:include-page-toc:
```


## Section One

some text

## Section Two

some other text



# Flow -> Lookup Paths

## Files Reference Lookup

When you refer to a file using plugins like

```markdown
:include-file: my-file.cpp
```

`Znai` tries to find the file in following locations:

- directory with the markup file that refers `my-file.cpp`
- documentation root directory
- locations enumerated inside `<doc-root>/lookup-paths` file

```txt
../examples
../module/src/main/java
```

## CLI parameter

Use `--lookup-paths` CLI parameter to add additional paths to lookup files.


## Zip and Jar Lookup

When Znai encounters zip or jar file listed inside `lookup-paths` it will unpack the archives into a temporary location and will use those locations to resolve files

```txt
../sources.zip
../module/archive.jar
```

```
:include-file: dir/inside-zip-b.txt
```


## HTTP Lookup Location

If files you want to include are not part of your project, you can add an HTTP base URL to `lookup-paths`.

```txt
../examples
../module/src/main/java
https://raw.githubusercontent.com/testingisdocumenting/webtau/master
```

If the file is not found using local locations, it will be fetched from the provided urls.

```
:include-file: .travis.yml
```


## Class Path Lookup

Znai is written using Java and can access resources from the classpath. Using class path lookup you can include snippets from projects deployed to, for example, Maven Central.


```
:include-java: org/junit/Assert.java {entry: "fail(String)"}
```




# Flow -> Search

## Local

To perform a local search of your documentation press `/` key or click the search section in the side panel on the left.

In [documentation structure]() we learned that documentation consist of

- Chapters
- Pages
- Page Sections

These entities play different and important roles in search. Search treats each *Page Section* as an independent unit. Each *Page Section* has an internally defined title that is a combination of all three titles.

Title match during search yields the highest score.

For example this current section full title is: *Flow Search Local*.

As your documentation grows, keep checking how easy it is to navigate to a section of your documentation using `/`.

Avoid: using generic names in your page titles and page section titles. You should not have dozens of pages called *Introduction*

## Global




# Flow -> Llm

## Context For LLMs

Note: Initial experimental support

Znai generates a single markdown file called `llm.txt` to be used by LLMs. It is deployed at the root of the documentation and can be used in multiple scenarios. The primary use case is to provide guide context to systems like Claude Code.



# Flow -> Footer

## Definition

To define a footer, create a `footer.md` file in the root directory of your documentation files. Footer content will be treated as regular page content, i.e., you can use the standard Markdown and all the custom extensions.

Content in `footer.md` will be displayed at the bottom of each page.



# Flow -> Support

## Linking To Support Site

To provide a support link to your users add link and title to the `meta.json` file.


Take a look at the example at the top of this page.



# Flow -> Footnotes

## Definition

To define a footnote use

```
[^my-id]: extra content for my footnote goes here
potentially including code blocks
```
Constructor()
```
```

To add a reference to the footnote use `[^my-id]` which will result in [^my-id]

[^my-id]: 

## Preview

Hover mouse over a footnote reference see its content in a tooltip.



# Flow -> Presentation

## Equal Flow


When people build presentations, there should be great focus on the flow of information, making sure that those newly introduced to the topic are not lost. A poorly organized presentation might drive users seeking clarification to documentation, which too often is just as unfriendly to neophytes.

Presentation mode in `Znai` is meant to help with both issues, mutually reinforcing good flow in presentations and documentation.

## Presentation Mode

`Znai` can turn any page into a presentation. Simply click  to the far right of each page title.

In presentation mode, only certain documentation elements are converted to slides:

- Headings
- Bullets
- Images and graphics
- Code snippets
- Command line input
- Math
- Tables

If you write your documentation with a presentation in mind it should improve the flow of your documentation.



# Flow -> Testing Is Documenting

## Auto Maintainable Content

There is a lot of content you can get by leveraging automated testing. And most importantly that content is going to be auto maintained.

Let's say you document a command line tool, and you want to provide an example of some operation output. You can copy and paste the output risking it being outdated. Or, you can write a test that exercises a command line and also captures its output.

You end up getting a lot of benefits:

- your app is tested
- your documentation is auto updated

## Examples

In addition to command line tools, here are some common scenarios you should consider:

- Test Web UI - *application screenshots*
- Test Business Logic - *tabular data*
- Test REST API - *API JSON real examples*
- Config files
- Script snippets
- Runtime dependencies DAGs
- ...

## Self Powering Cycle

As you write your documentation you will come up with new scenarios to test. As you write tests, think about your documentation and what test-produced artifacts can improve it.

Znai provides a lot of utilities to include test artifacts.

In [Synergy With Testing]() chapter you will see examples of UI, REST API and Business Logic.



# Flow -> Shortcuts

## Keyboard shortcuts




# Snippets -> Code Snippets

## Simple Snippet

It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this.

```
interface PriceService {
    Money calcPrice(String cuips, Integer quantity);
}
```


Note: this method doesn't highlight code.

## Specifying Language

You can also specify a language to enable syntax highlighting for your snippet.

```
```javascript
import React, {Component} from 'react'

class MyComponent extends Component {
    render() {
        /// ...
    }
}
```
```

```javascript
import React, {Component} from 'react'

class MyComponent extends Component {
    render() {
        /// ...
    }
}
```

The following languages/formats are supported:

- C++
- OCaml
- Python
- TypeScript
- Java
- SQL
- JSON
- Protobuf
- JavaScript
- Groovy
- Bash

`Znai` uses [prismjs]() library to provide syntax highlighting. Note that it is not being executed inside the browser, but rather applied during HTML generation.

## Title

Use the `title` property to specify a title.

```
```javascript {title: "ReactJS Component"}
...
```
```

```javascript
import React, {Component} from 'react'

class MyComponent extends Component {
    render() {
        /// ...
    }
}
```

## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.

```
```javascript {title: "ReactJS Component", anchorId: "my-special-code"}
...
```
```

```javascript
import React, {Component} from 'react'

class MyComponent extends Component {
  render() {
    /// ...
  }
}
```

## Wide Code

Use the `wide` option to stretch wide code to occupy as much horizontal real estate as possible.

```
```java {wide: true}
class InternationalPriceService implements PriceService {
    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {
        ...
    }
}
```
```

```java
class InternationalPriceService implements PriceService {
    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {
        ...
    }
}
```

Without the `wide` option code will be aligned with the rest of the text and users can use scrollbars.

```java
class InternationalPriceService implements PriceService {
    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {
        ...
    }
}
```

Note: Good placement of a *Wide Code* element is at the end of a page or a section to show the full version of a code sample.

## Wrap Code

Use the `wrap` option to stretch wide code to occupy as much horizontal real estate as possible.

```
```java {wrap: true}
class InternationalPriceService implements PriceService {
    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {
        ...
    }
}
```
```

```java
class InternationalPriceService implements PriceService {
    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {
        ...
    }
}
```

## Read More

If you have a large code snippet and you want to initially display only a small fraction use the `readMore` option with an **optional** `readMoreVisibleLines` option to specify a number of initial lines displayed (default is 8).

```
```java {readMore: true, readMoreVisibleLines: 3}
public class DocScaffolding {
    private final Path workingDir;
    private Map<String, List<String>> fileNameByDirName;
    ...
```
```

```java
public class DocScaffolding {
    private final Path workingDir;
    private Map<String, List<String>> fileNameByDirName;

    public DocScaffolding(Path workingDir) {
        this.workingDir = workingDir;
        this.fileNameByDirName = new LinkedHashMap<>();
    }

    public void create() {
        createPages();
        createToc();
        createMeta();
        createIndex();
        createLookupPaths();
    }

    private void createLookupPaths() {
        createFileFromResource("lookup-paths");
    }

    private void createMeta() {
        createFileFromResource("meta.json");
    }
}
```

## Highlights

Use the `highlight` option to bring readers attention to important lines.

```
```java {highlight: "workingDir"}
public class DocScaffolding {
    private final Path workingDir;
    private Map<String, List<String>> fileNameByDirName;

    public DocScaffolding(Path workingDir) {
    ...
    }
```
```

```java
public class DocScaffolding {
    private final Path workingDir;
    private Map<String, List<String>> fileNameByDirName;

    public DocScaffolding(Path workingDir) {
    ...
    }
```

[Learn More]() about highlighting options.



# Snippets -> External Code Snippets

## Embedding Content

To reduce documentation maintenance burden avoid copy and paste of code snippets. Embed content by referencing existing files using the `include-file` plugin instead.

```
:include-file: file-name.js
```

This `include-` syntax will appear throughout the documentation and represents a family of custom Markdown extensions.


The file will be looked up using following rules:

- directory with a markup file
- root directory of a documentation
- all lookup paths listed in a `lookup-paths` file

## Syntax highlighting

Syntax highlighting is automatically selected based file extension. E.g. extensions `.c`, `.h`, `.cpp`, `.hpp` are treated as C++.

```
:include-file: simple.c
```


```
:include-file: Hello.sc
```


Use `lang` to force a different syntax highlighting

```
:include-file: simple.c {lang: "java"}
```


Note: File extensions and `lang` are case-insensitive.

## Title

```
:include-file: file-name.js {title: "ES6 class"} 
```

Use the `title` property to specify a title.


Use the `autoTitle` property to set `title` to be the file name.

```
:include-file: file-name.js {autoTitle: true} 
```


## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.

```
:include-file: file-name.js {autoTitle: true, anchorId: "my-code-anchor"}
```


## Wide Code

Use the `wide` option to stretch wide code to occupy as much horizontal screen real estate as possible.

```
:include-file: WideCode.java {wide: true}
```


Without the `wide` option code will be aligned with the rest of the text and users can use scrollbars.


Note: Good placement of a *Wide Code* element is at the end of a page or a section to show the full version of a code sample.

## Wrap Code

Use the `wrap` option to enable long lines wrapping.

```
:include-file: WideCode.java {wrap: true}
```


## Read More

If you have a file with large code snippet and you want to initially display only a small fraction use `readMore` option with an **optional** `readMoreVisibleLines` option to specify a number of initial lines displayed (default is 8).

```
:include-file: LongFile.java {readMore: true, readMoreVisibleLines: 3}
```


## Collapse

Use `collapsed: true|false` to make code snippet collapsible. Note: `title` option is required

```markdown
:include-file: file-name.js {title: "collapsible snippet", collapsed: true}
```


## No Gap

Use `noGap: true` to remove top/bottom margins when there are multiple snippets in a row.

```markdown
:include-file: file-name.js {title: "part one", noGap: true, collapsed: false}
:include-file: simple.c {title: "part two", collapsed: false}
```



Use `noGapBorder: true` to add a delimiter between code snippets:

```markdown
:include-file: ocaml/api.mli {title: "Game", noGap: true, noGapBorder: true}
:include-file: ocaml/api.ml
```



## Highlights

[Learn More]() about highlighting snippets lines.

## Snippets Manipulation

Read page on [Snippets Manipulation]() to learn more about extracting/modifying snippets before displaying them.



# Snippets -> Snippets Manipulation

## Surrounded By

Use  to extract code snippet surrounded by a marker


```
:include-file: python-examples.py {
    title: "extracted example with surroundedBy",
    surroundedBy: "# example-cancel-trade"}
```


Use  to keep marker lines


```markdown
:include-file: custom.dsl {
  title: "keep marker lines",
  surroundedBy: "block-A",
  surroundedByKeep: true
}
```


## Multiple Surrounded By

Pass a list to  to extract multiple blocks

```
:include-file: python-examples.py {
  title: "extracted example",
  surroundedBy: ["# example-import-block", "# example-cancel-trade"]}
```


Use  to select separator(s) between blocks

```
:include-file: python-examples.py {
  title: "extracted example",
  surroundedBy: ["# example-import-block", "# example-cancel-trade"],
  surroundedBySeparator: ["..."]
}
```


Note:  can be either single value or a list. Plugin will use a different separator for each block. Use `null` to have an empty line as a separator.

## Surrounded By Scope

Use  to extract text using scopes like `{}`, `[]`, etc:


```markdown
:include-file: MyClass.java {surroundedByScope: {start: "if (condition)", scope: "{}"}}
```


## Surrounded By Multi-chars scope

Pass comma separated multi char region definition to  to handle scopes defined with keywords:


```markdown
:include-file: ocaml/model.mli {surroundedByScope: {start: "module ModelA", scope: "sig,end"}}
```


## Replace

Use  to replace content of the resulting snippet

```markdown
:include-file: python-examples.py {
  surroundedBy: "# example-cancel-trade",
  replace: ['id', '"trade_id"'] }
```


Pass a list of lists to  for multiple replaces

```markdown
:include-file: python-examples.py {
  surroundedBy: "# example-cancel-trade",
  replace: [['id', '"trade_id"'], ["market", "api"]]}
```


## Replace Regexp Groups

Use `$1` regexp capture groups to create derived content


```
:include-file: replace-all-group.txt {replace: ["(\\w+)(\\d+)", "$2-$1"]}
```


## Start/End Line

Use ,  to extract specific content by using marker lines.


```
:include-file: python-examples.py {startLine: "example: book trade", endLine: "example-end"}
```


Note: Lines match doesn't have to be exact, `contains` is used.

By default  and  are included in the rendered result. Use  to remove markers.

```
:include-file: python-examples.py { 
    startLine: "example: book trade",
    endLine: "example-end",
    excludeStartEnd: true }
```


To exclude start or end line only use  and 

## Start/End Multiple Lines

Pass multiple values to `startLine` and `endLine` to specify more precisely a block of code to extract.

As example, let's extract a second `match` block from the code snippets below without adding extra markers:


if we use `startLine: "match season"`, we can't guarantee what block will it pick, and it will depend on functions order.

To hit the exact one use multiple start lines. Znai will attempt to find a combination of start lines with the smallest distance between them:

```
:include-file: ocaml/seasons.ml {startLine: ["let describe_season", "match season"], startLineKeepLast: true}
```


Note: Use `endLine` and `endLineKeepFirst` to limit lines from the bottom. `excludeStart` removes all the lines between specified start lines, including the lines. `excludeEnd` removes all the lines between specified end lines, including the lines.

## Include Contains

Use  to include only lines containing specified text(s).

```
:include-file: python-examples.py { include: "import " }
or
:include-file: python-examples.py { include: ["import "] }
```


## Exclude Contains

Use  to exclude lines containing specified text(s).

```
:include-file: python-examples.py { exclude: "# example" }
or
:include-file: python-examples.py { exclude: ["# example"] }
```


## Include Regexp

Use  to include only lines matching regexp(s).

```
:include-file: python-examples.py { includeRegexp: "market.*_trade" }
or
:include-file: python-examples.py { includeRegexp: ["market.*_trade"] }
```


## Exclude Regexp

Use  to exclude lines matching regexp(s).

```
:include-file: python-examples.py { excludeRegexp: ["if .* ==", "\\s+main", "# example", "^\\s*$"] }
```




# Snippets -> Snippets Highlighting

## Line By Text

Use the `highlight` option to bring readers attention to the important lines.

```
:include-file: file-name.js {highlight: "export"}
```


## Line By Index

It is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally, you can combine two approaches and pass a list of things to highlight.

```
:include-file: file-name.js {highlight: ["export", 1]}
```


Note: Order of lines to highlight is reflected during presentation mode

## Text From File

Use the `highlightPath` option to highlight lines specified in a separate file.

```
:include-file: file-name.js {highlightPath: "lines-to-highlight.txt"}
```



## Region

Use the `highlightRegion` to highlight large portions of the code as one highlight block:

```
:include-file: file-name.js {highlightRegion: {start: "constructor", end: "}"}}
```


## Region Using Scope

Use the `highlightRegion.scope` to highlight region using scope like `{}`. Unlike example above, highlight will not stop at first closing `}`:

```
:include-file: with-nested-if.js {highlightRegion: {start: "userId ===", scope: "{}"}}
```


Use multiple start lines to narrow down a specific region

```
:include-file: with-multiple-if-clarify.js {highlightRegion: {
  start: ["if (userId ===", "canRead"], scope: "{}"}
}
```

Znai will find a smallest text block that contains all specified lines and then highlight the most inner one:


## Multiple Regions

Use list to specify multiple regions to highlight:

```markdown
:include-file: with-multiple-if.js {highlightRegion: [
  {start: "canRead", scope: "{}"},
  {start: "canWrite", scope: "{}"}]
}
```




# Snippets -> Code Comments

## Callout Comments

Use `commentsType: "inline"` to extract comments from a code and render them as bullet points

Given a file with comments


```
:include-file: file-name-with-comments.js {commentsType: "inline"}
```


Multiple comment lines can be put above a code line. All the comment lines will be merged and applied to the next code line.



## Spoilers

Set the `spoiler` property to initially hide explanations. It may be useful when teaching.

```
:include-file: file-name-with-comments.js {commentsType: "inline", spoiler: true}
```

Click on the spoiler to reveal the explanations:


## Remove Comments

Use `commentsType: "remove"` to hide all the comments from a code snippet Given a file with comments


```
:include-file: file-name-with-comments.js {commentsType: "remove"}
```




# Snippets -> Inlined Code Snippets

## Backtick

To display inline code within a text, put it inside a backtick.

```
Example: To check if an Exchange is closed, you need to use `ExchangeCalendar`
```

Example: To check if an Exchange is closed, you need to use `ExchangeCalendar`

## From File

To display inline code from a file, use the `file` inlined code plugin.

```
Example: To access this feature, navigate to `:file: urlsample.txt`. 
```

Example: To access this feature, navigate to .

## Validated Identifier



Specify multiple files via [page local]() or [global]() plugin defaults to avoid repeating `validationPath` throughout the page.


```markdown
my text `:identifier: my_func`
```



# Snippets -> API Parameters

## Inlined CSV

Use `api-parameters` fenced code plugin to document API parameters.

```
```api-parameters
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```
```


## Nested

Use `parent.child` syntax to define nested objects like this:

```
```api-parameters
sessionId, Integer, session Id
person, Person, person to login with
person.firstName, String, first name of the person
person.lastName, String, last name of the person
roles, List<Role>, list of authorized roles
roles.id, String, role id 
roles.description, String, role description
```
```

Note: when using this approach it is necessary to explicitly define a `root` entry, such as `person` in this example.


Note: if a parameter name actually contains a period ("."), you can prevent this nesting behavior by putting the parameter name in single quotes, e.g. "person.firstName"

## Title

Use the `title` parameter to specify a title.

```
```api-parameters {title: "person definition"}
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```
```


## Collapsing Parameters

Use `collapsed: true|false` to make `api-parameters` collapsible.

```markdown
```api-parameters {title: "address definition", anchorPrefix: "title", collapsed: true}
city, String, city name
zipCode, String, zip code
```
```


Note: `collapsed` requires `title` to be present

## No Gap

Use `noGap: true` to remove top/bottom margins when there are multiple parameter instances in a row.

```markdown
```api-parameters { title: "person definition", anchorPrefix: "title", collapsed: false, noGap: true }
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```

```api-parameters {title: "address definition", anchorPrefix: "title", collapsed: true}
city, String, city name
zipCode, String, zip code
```
```



## Size

Use the `small` parameter to render API Parameters using smaller font size and occupying less width

```
```api-parameters {small: true}
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```
```


## Multi-line CSV Description

Use quotes `"` to wrap a multiline description. Here is an example of description including multiple lines and nested code block example.

```
`````api-parameters 
cores, String, "
```
execute(cores: 10)
```
Specify how many cores to allocate for execution
"

gpu, Boolean, "
```
execute(cores: 10, gpu: true)
```
Specify whether to use gpu
"
`````
```


Note: Use larger number of backticks on outside then inside to distinct between `api-parameters` plugin boundaries and nested code blocks

## External JSON File

Instead of hard-coding your parameters inside markdown files, you can specify an external JSON file. JSON could be generated based on the data you have. Some examples:

- build time annotation processor
- test time command line parameters generation


Given the above file, use

```
:include-api-parameters: api-parameters.json {title: "Person Definition"}
```

to display it as API Parameters


Note: `description` field in JSON file is treated as Markdown

## Anchors

Each API parameter has an anchor associated with it. You need to hover over parameter name for it to appear. Use `anchorPrefix` parameter to avoid conflict of anchor ids when using the same API parameter names within a single page:

```
```api-parameters {anchorPrefix: "customPrefix"}
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```
```


In the example above `customPrefix` is added to each parameter link.

## Long Parameter Names

Znai hard wraps long parameter names to leave more space to description.


Use `noWrap: true` to remove hard wrap enforcement

```
```api-parameters {anchorPrefix: "customPrefix", noWrap: true}
VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES, String, description with *markdown* support
VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES, String, another description line with *markdown* support
```
```


## Wide Mode

Use `wide: true` to use all the available horizontal space

```
```api-parameters {anchorPrefix: "customPrefix", noWrap: true, wide: true}
VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES, String, "longer line longer line, description with *markdown* support"
VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES, String, "longer line longer line, another description 
line with *markdown* support and few moe lines"
```
```




# Snippets -> Code References

## Local References

You can turn parts of a code snippet into links to internal or external pages.

To do that, define references in a CSV file, using a two column format: `expression, link`.


```
:include-file: file-name.js {referencesPath: "references/references-demo.csv"}
```


JSON format is also supported


## Page Defaults

Use plugin [Page Local Defaults]() to set references file that is relevant to the page at hand.

## Global References

Add references to `references.csv` or `references.json` if you want all your code snippets to use the same references.



## Inlined Code

[Inlined code]() is automatically converted into a link if its content matches one of the global references entries:





# Snippets -> Json

## Auto Formatting

Use `json` fence block to render auto formatted json and use extra capabilities described below

```
```json
[{"key1": "value1"}, {"key2": "value2"}]
```
```


Use `json` include plugin to read json from an external file


```
:include-json: simple.json
```


## Highlight Values By Path

Use the  parameter to highlight an individual value:

```
```json {highlightValue: "root[1].key2"}
[{"key1": "value1"}, {"key2": "value2"}]
```
```


Pass multiple values to  to highlight more than one leaf value

```
:include-json: book-store.json {highlightValue: ["root.store.book[0].category", "root.store.book[2].category"]}
```

Comma-separated paths specified inside  will be highlighted.


## Highlight Values By Path From File

Use  to specify a file with paths to highlight values.


```
:include-json: book-store.json {highlightValueFile: "book-store-paths.json"}
```


## Highlight Keys By Path

Use the  parameter to highlight keys:

```
```json {highlightKey: "root[1].key2"}
[{"key1": ["value11", "value12"]}, {"key2": ["value21", "value22"]}]
```
```


## Highlight Keys By Path From File

Use  to specify a file with paths to highlight keys.


```
:include-json: book-store.json {highlightKeyFile: "book-store-paths.json"}
```


## Json Subparts

To include only a portion of your document pass [Json Path]() as  property:

```
:include-json: book-store.json {include: "$..book[0,1]"}
```


## Enclose In Object

Use  to wrap any JSON and include result into parent object(s)

```
:include-json: book-store.json {encloseInObject: "books.rare", include: "$..book[0,1]"}
```


## Title

Use `title` parameter to specify a snippet title:

```
:include-json: book-store.json {include: "$..book[0,1]", title: "Books"}
```


Use `autoTitle: true` to automatically set title to specified file name

```
:include-json: book-store.json {include: "$..book[0,1]", autoTitle: true}
```


## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.


```
:include-json: book-store.json {include: "$..book[0,1]", title: "Books", anchorId: "my-books"}
```

## Read More

Use `readMore` to show only first lines of `JSON`. **Optional** `readMoreVisibleLines` can be specified to set the initial number of lines to display

```
:include-json: book-store.json {readMore: true, readMoreVisibleLines: 5}
```


## Hidden Parts

To hide sub-parts of your `JSON` use `collapsedPaths` property.

```
:include-json: book-store.json {collapsedPaths: ['root.store.book']}
```


## Highlights

To highlight a specific `JSON` value using `paths`, in (similar fashion to [regular code snippets](), you can highlight a line by text matching or by providing a line index.

```
:include-json: book-store.json {highlight: ["category", 2]}
```


## Code References

You can turn parts of `JSON` into links to internal or external pages.

```
:include-json: trader.json {
  title: "trader",
  referencesPath: "references/json-references-demo.csv"
}
```



## Callouts

Use `callouts` parameter to attach bullet points with explanation to a json path:

```markdown
:include-json: book-store.json {
  collapsedPaths: ['root.store.book'],
  callouts: {
   "root.store.bicycle.color": "subject of **availability**",
   "root.store.bicycle.price": "*price* changes daily"
  }}
}
```


}

## Callouts From File

Use `calloutsFile` parameter to read callouts from a separate file. Can reduce duplication and allows to generate callouts at runtime.

```markdown
:include-json: book-store.json {
  collapsedPaths: ['root.store.book'],
  calloutsFile: "schema-notes.json"
}
```



CSV format is also supported


## Test Results

Below is an example of using [WebTau]() testing framework to make an HTTP call, extract JSON response and information about asserted fields to highlight.


`http.doc.capture` captures multiple test artifacts into separate files: request/response.json, url.txt, paths.json (validated paths).

```markdown
:include-json: weather-example/response.json {
  title: "weather response example",
  highlightValueFile: "weather-example/paths.json"
}
```


## Incomplete JSON

All the features above require fully formed JSON. If you need only syntax highlighting use [include-file]() plugin

```
:include-file: incomplete.json
```




# Snippets -> Xml

## Highlight Parts

Use the `include-xml` plugin to bring attention to a certain place in a `XML` file.

Comma-separated paths specified inside `paths` will be highlighted.

```
:include-xml: menu.html {paths: ["ul.@class", "ul.li[1].@class", "ul.li[2]"]}
```


Note: Children index in `paths` starts with 0 and is associated with a tag

```
:include-xml: simple.xml {paths: ["root.a[1]", "root.b[0]", "root.c[0]"]}
```


## Use Cases

`include-xml` and `paths` can be used to document:

- XML Config
- CSS selectors
- ReactJS properties
- AngularJS templates

In presentation mode, paths will be highlighted one at a time.

## Title

Use the `title` property to specify a title.

```
:include-xml: menu.html {title: "Menu snippet"}
```




# Snippets -> OCaml

## Extract Comment Text

Given text file:


When you use the following plugin, it will extract the comment and embed it as if it was typed.

```
:include-ocaml-comment: ocaml/domain.mli {commentLine: "description that contains"}
```




# Snippets -> Open API

## Operation By Method And Path

If you have a file with an [Open API]() definition (a.k.a. a Swagger file) you can render it by a given `method` and `path`, or by `operationId`. Both `yaml` and `json` formats are supported.

Let's consider [Uber's API definition]() as an example:

```
:include-open-api: open-api/uber.json {method: "get", path: "/estimates/time"}
```

### Responses

##### 200

##### default


Note: descriptions are treated as Markdown, using the [CommonMark]() specification

## Operation By ID

Let's take a pet store example. Use `operationId` to include operation definition by ID.

```
:include-open-api: petstore-openapi3.json {operationId: "updatePet"}
```

### Request

### Responses

##### 200

##### 400

##### 404

##### 405


## Auto Section

Use the `autoSection` property to automatically generate a page section with a title taken from an operation summary.

```
:include-open-api: petstore-openapi3.json {operationId: "addPet", autoSection: true}
```

Note: The section below is automatically generated by `include-open-api`

### Request

### Responses

##### 200

##### 405


## Tags

Specify `tags` to automatically generate multiple entries from a service definition file.

```
:include-open-api: open-api/uber.yaml {tags: "Estimates", autoSection: true}
```

Note: The sections below are automatically generated by `include-open-api`

### Responses

##### 200

##### default

### Responses

##### 200

##### default


## Two Sides Layout

Znai supports [Two Sides]() Layout mode that is perfect to supplement API documentation with examples column.

[Open API example]()



# Snippets -> CLI

## Parameters Highlight

To bring attention to important parameters in your CLI examples use the `cli` fence plugin.

```
```cli {highlight: "important"}
my-super-command paramA --important-flag=true 
```
```


Note: Parameter names gets matched as long as their names contain the passed value.

```markdown
```cli {highlight: "important"}
my-super-command paramA --important-flag=true 
another-command stop  
```
```


## Include Plugin

Alternatively to fence plugin above, you can use include type. Note: options listed below are applicable to either form

```
:include-cli-command: my-super-command paramA --important-flag=true {highlight: "important"}
```


## Long Commands

Long command lines will be automatically wrapped into multiple lines.


Use `threshold` parameter to specify the max length of a line before splitting:

```
:include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 {
    highlight: ["name", "value"], 
    threshold: 30
}
```


Use `splitAfter` to force line splitting after specified parameter:

```
:include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 {
    highlight: ["name", "value"], 
    splitAfter: ["--score=2", "--value=8"]
}
```


Note: Unlike `highlight`, `splitAfter` must be an exact match

## Handle Special Symbols

If your command contains special symbols, such as `{`, move the command definition to a `command` option

```
:include-cli-command: {command: "another-command {file1} [file2]", highlight: ["file1"]}
```


## From File

You can read a command from file.

```
:include-cli-command: {commandFile: "cli/command.txt", highlight: "value"}
```



This option is useful for displaying a captured command during tests.

## ANSI Colors Output

CLI renders ANSI colors automatically.


```
:include-cli-output: cli/ansi.out
```


## Title

Use `title` to specify output of the output

```
:include-cli-output: cli/ansi.out {title: "captured output"}
```


## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.

```
:include-cli-output: cli/ansi.out {
  title: "captured output",
  anchorId: "my-output"
}
```


## Output Highlight

Use  to highlight lines

```
:include-cli-output: cli/ansi.out {
  title: "captured output",
  "highlight": "GET https"
}
```


Use  to highlight lines based on the content of a file

```
:include-cli-output: cli/ansi.out {highlightPath: "cli/file-path-of-asserted-lines.txt"}
```



## Wide Mode

Use `wide` option to occupy as much horizontal space as available

```
:include-cli-output: cli/wide-output.out {
  title: "Captured output",
  wide: true
}
```


## Extract Snippets

Use `startLine`, `endLine` to extract specific content by using marker lines.

```
:include-cli-output: cli/file-path-of-captured.out {
    title: "Limited captured output",
    startLine: "git push",
    endLine: "master -> master"    
}
```


More on snippets extractions: [Snippets Manipulation]().

## Presentation Mode

In presentation mode, cli command related plugins will simulate typing inside the terminal.

You can gradually reveal `cli-output` by providing `revealLineStop` parameter.

```
:include-cli-output: cli/file-path-of-captured.out {revealLineStop: [0, 4], highlight: "remote"}
```

Passed  will highlight each line as a separate slide.




# Snippets -> Math

## LaTeX Block

To render math you can use [LaTeX]() math expressions. Surround LaTeX expression with fenced block and specify `latex` as a language

```
```latex
\forall x \in X, \quad \exists y \leq \epsilon
```
```

The result will be a following math expression.


```
```latex
x = \begin{cases}
a &\text{if } b \\
c &\text{if } d \\
x &\text{if } z
\end{cases}
```
```


Alternatively surround a match expression with double dollar `$$` sign to render it into a latex block.

```markdown
Given: 
$$x=y$$ and $$y=z$$
```

Given: 

 and 


## LaTeX Inline

Znai also supports inline LaTeX. Use single backticks instead of three to render math expressions inline. JSON parameters are used to allow LaTeX braces to be parsed correctly.

```
It holds that `:latex: {src: "\\frac{1}{2} < \\sqrt{2}"}`.
```

The result will be a following math expression.

It holds that .

Alternatively you can surround latex expression with `$`.

```
It holds that $\frac{1}{2} < \sqrt{2}$
```

It holds that 

## Presentation Mode

In presentation mode, rendered expressions will automatically scale to make use of the screen space.

## KaTex

Rendering is done by using awesome [KaTeX]() library.

[KaTeX]() fonts are copied to generated documentation resources.



# Snippets -> Jupyter Notebook

## Code and Output

Use `include-jupyter` to include [Jupyter]() notebook inside your documentation.

```
:include-jupyter: jupyter/simple-notebook.ipynb
```


Note: Remember that you can define lookup paths for files like notebooks inside [lookup-paths]() file, so you don't have to copy and paste notebooks to your documentation directory.

## Seamless Markdown Integration

Markdown from your notebook will be seamlessly integrated into your current page. First level `# headers` will become part of Table Of Contents and part of a search unit.


```
:include-jupyter: notebook-with-markdown-story.ipynb
```

Note: below text is auto generated, including the **Panda** section

## Pandas

Displaying values using panda `display`

Values can be displayed using standard console output

Or using library to render a html snippet


## Include Only Specified Sections

Use `includeSection` to select which sections of the notebook to include.

```
:include-jupyter: notebook.ipynb {
    includeSection: ["Section One"; "Section Three"], 
    excludeSectionTitle: true
}
```

## Two Sides

You will learn about the [Two Sides Layout]() in the Layout section. If you are are curious now for examples, jump to [Jupyter Two Sides example]()



# Snippets -> Cpp

## Description Extraction

In addition to [snippets manipulation]() that is applicable to any language, Znai can extract description of methods and convert parameters into [API Parameters]()

```
:include-doxygen-doc-params: utils::nested::my_func { title: "My Params" }
```


Head over to [CPP Description Extraction]() to learn more

## Auto Reference

Znai provides plugins to automatically create reference documentation for methods and classes.

```
:include-doxygen-member: multi_println
```







Head over to [CPP Auto Reference]() to learn more



# Snippets -> Python

## Content Extraction

In addition to [snippets manipulation]() that is applicable to any language, Znai can extract content of methods.

```
:include-python: python/example.py {entry: "Animal.says", bodyOnly: true}
```



Head over to [Python Content Extraction]() to learn more

## Description Extraction

Znai provides plugin to extract PyDoc content. Use it to extract high level description and merge it with the rest of the documentation. Convert method parameters into [API Parameters]()

```
:include-python-doc-params: python/pydoc-params.py {entry: "my_func", title: "result and parameters"}
```



Head over to [Python Description Extraction]() to learn more

## Auto Reference

Znai provides plugins to automatically create reference documentation for methods and classes.

```
:include-python-method: fin.money.render_money
```



Head over to [Python Auto Reference]() to learn more



# Snippets -> Java

## Content Extraction

In addition to [snippets manipulation]() that is applicable to any language, Znai can extract content of methods.

```
:include-java: HelloWorld.java {
  entry: "sampleMethod",
  commentsType: "inline",
  bodyOnly: true
}
```


Head over to [Java Content Extraction]() to learn more

## Description Extraction

Znai provides plugin to extract JavaDoc content. Use it to extract high level description and merge it with the rest of the documentation. Convert Enums and method parameters into [API Parameters]()

```
:include-java-doc-params: HelloWorld.java {
    entry: "importantAction", 
    title: "Trading Required Parameters",
    referencesPath: "references/javadoc-references-demo.csv"
}
```


Head over to [Java Description Extraction]() to learn more

## Auto Reference

Auto reference similar to [Python]() is planned for the future releases.

Create a [GitHub Issue]() or [Discussion]() to help prioritize



# Snippets -> Groovy

## Method Body

When you need to extract a specific method body use the `include-groovy` plugin.

Consider the following file:


Specify a method name to extract it from the file.

```
:include-groovy: HelloWorldTest.groovy {entry: "should calculate risk based on epsilon", bodyOnly: true}
```

If `bodyOnly` is specified, signature will be omitted.


## Multiple Bodies

Pass `list` as `entry` to extract multiple method bodies

```markdown
:include-groovy: HelloWorldTest.groovy {
  title: "api example",
  entry: ["should calculate risk based on epsilon", "should calculate risk based on epsilon"],
  bodyOnly: true }
```


Pass `entrySeparator: "<separator>"` to have a provided line in between entries as a separator.

```markdown
:include-groovy: HelloWorldTest.groovy {
  title: "api example",
  entry: ["should calculate risk based on epsilon", "should calculate risk based on epsilon"],
  entrySeparator: "",
  bodyOnly: true }
```


## Overloads

Specify types inside brackets to select an overloaded versions of your methods.

Types should appear as they do in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin.


```
:include-groovy: HelloWorld.groovy {entry: "methodName(List, Map)"}
:include-groovy: HelloWorld.groovy {entry: "methodName(def,def)"}
```

Note: Generic types are erased and spaces after commas are optional


Note: `def` type remains `def` and not `Object`


## Class Body


To extract `class` body use:

```
:include-groovy: HelloWorld.groovy {entry: "HelloWorld"}
```


Use `bodyOnly` to only display only the body of your class.

```
:include-groovy: HelloWorld.groovy {entry: "HelloWorld", bodyOnly: true}
```




# Snippets -> Markdown

## Single Markdown File

To reuse Markdown in several places without duplication, use the `include-markdown` plugin.


```
:include-markdown: markdown-dir/md-to-include.md
```


## Optional Markdown

When you document an open source project you may have different instructions based on where the documentation is deployed.

For example, this documentation has two versions, one deployed internally at Two Sigma and one deployed externally using GitHub Pages. Most of the documentation parts are the same, but there are differences in sections like *Getting Started*.

We build documentation twice and the differences are handled by `include-markdown`'s `firstAvailable` parameter.

```
:include-markdown: {firstAvailable: [
    "markdown-dir/getting-started-step-internal.md", 
    "markdown-dir/getting-started-step-external.md"]}
```


## Partial Markdown

Use `surroundedBy` to include portion of a markdown from existing markdown file, e.g. `readme.md`

Given an existing markdown files with markers


```markdown
:include-markdown: markdown-dir/markdown-with-markers.md {surroundedBy: "<> (marker-one)"}
```


## Inlined Markdown

To inline a piece of markdown use the inlined version of the plugin

```
content `:markdown: path-to-file.md` content
```

Plugin will inline text content into current paragraph.

```markdown
Use the latest version `:markdown: markdown-dir/inlined.md` to get the feature.
```


Use the latest version  to get the feature.

Use `firstAvailable` parameter to include first file that can be resolved

```markdown
Use the latest version `:markdown: {
  firstAvailable: ["markdown-dir/inlined-alternative.md", "markdown-dir/inlined.md"]}` to get the feature.
```


Use the latest version  to get the feature.

## Multiple Markdown Files

You can also include all the Markdown files within a directory by using `include-markdowns`.

This plugin can be used to generate release notes or an FAQ page.



```
:include-markdowns: faq-collection {sort: "ascending"}
```


Note: `include-markdowns` renders files of the specified directory based on the filename (by default in descending alphabetical order).



# Visuals -> Attention Signs

## Speed Bump

People skim through documentation. You can grab users attention by using attention signs.

To create an attention sign, start a paragraph with one of the predefined keywords followed by a colon.

```
Keyword: message
```

## Note

```
Note: It is very important to not overuse signs. Make sure each sign counts.
```

Note: It is very important to not overuse signs. Make sure each sign counts.

## Warning

```
Warning: Bring attention to a common mistake or an often missed configuration step 
using a warning sign. Do not use too many warning signs.
```

Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs.

## Question

```
Question: Use the question sign to bring an extra attention to the main idea of a page.
\
What is the point of the `attention signs`?
```

Question: Use the question sign to bring extra attention to the main idea of a page.   
What is the point of the `attention signs`?

## Exercise

```
Exercise: write a hello world example in this language
```

Exercise: write a hello world example in this language

## Avoid

```
Avoid: using multiple versions of `ReactJS` inside one project.
```

Avoid: using multiple versions of `ReactJS` inside one project.

## Do Not

```
Don't: commit node_modules to your repository

Do not: commit node_modules to your repository
```

Don't: commit node_modules to your repository

Do not: commit node_modules to your repository

## Tip

```
Tip: use temporary directory to generate the summary file for upload
```

Tip: use temporary directory to generate the summary file for upload

## Recommendation

```
Recommendation: write automated tests for new business logic
```

Recommendation: write automated tests for new business logic

## Fence Block

Use fence block to create an explicit attention block.

```markdown
```attention-note
hello world
```
```


By default, there is only icon. Use `label` to add text

```markdown
```attention-note {label: "Custom Label"}
hello world
```
```


Using block makes it easier to include other plugins inside

```markdown
`````attention-note
Use this command to setup fresh environment
```cli
mycommand setup
```
`````
```


## Attention Block Types

```
attention-<type>
```









# Visuals -> Images

## Standard Markdown

An image can be included using standard Markdown syntax.

```markdown
![alt text](regular-image.png)
```

![alt text](regular-image.png)


```markdown
![alt text](castle.jpg "custom title")
```

![alt text](castle.jpg "custom title")


## Extension

`Znai` has `include-image` extension to provide additional features:

- annotations
- fit
- scale
- alignment
- border
- presentation mode

## Title

Use `title` to add a title to an image.

```
:include-image: castle.jpg {title: "beautiful castle"}
```


## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.

```
:include-image: castle.jpg {title: "beautiful castle", anchorId: "castle-image"}
```


## Border

Use `border: true` to include a border around image.

```
:include-image: image.png {border: true}
```


## Fit

By default, images generated with `include-image` occupy all the available horizontal space:


Use `fit` parameter to fit an image to the text column width.

```
:include-image: books.jpg {fit: true}
```

Note: You can click on the scaled down images to display it full screen


## Scale

To scale image up or down use `scale` option, `1` is default, `0.5` is half an image size.

```
:include-image: books.jpg {scale: 0.3}
```


Note: You can click on the scaled down images to display it full screen

## Align

Use `align` option to align images left or right.

```
:include-image: books.jpg {align: "left", scale: 0.3}
```


```
:include-image: books.jpg {align: "right", scale: 0.3}
```


## Collapse

Use `collapsed: true|false` to make image collapsible. Note: `title` option is required

```markdown
:include-image: books.jpg {
  fit: true, 
  title: "books", 
  anchorId: "my-books", 
  collapsed: true
}
```


## No Gap

Use `noGap: true` to remove top/bottom margins when there are multiple images in a row.

```markdown
:include-image: books.jpg {
  fit: true,
  title: "books",
  collapsed: true,
  noGap: true
}
:include-image: castle.jpg {
  fit: true,
  title: "castle",
  collapsed: false
}
```



## External Image

Pass external url in place of image to render image from a remote site

```
![text](https://external-url)

:include-image: https://external-url { align: "left" }
```

Note: Pass  parameter to validate image urls

## Mobile And Desktop Only

Use `mobileOnly` to only render an image in mobile screen size. Use `desktopOnly` to only render an image in desktop screen size.

```
:include-image: small-book.png {title: "only visible in mobile screen size", mobileOnly: true}
:include-image: books.jpg {title: "only visible in desktop screen size", desktopOnly: true, fit: true}
```





# Visuals -> Image Annotations

## Badges

Use `image` fence plugin to display Image and manually provide badge coordinates

```
```image testingisdocumenting.png {scale: 0.5} 
840,600
1680,1400
```
```


Note: Color of badges change based on the background color

## Manual Coordinates

Hover mouse over image during [Preview Mode]() to display coordinates under the cursor. Use the displayed coordinates to update the position.

## Badge Textual Description

Put ordered list right before or after an annotated image to associate text with the badges.

```markdown
1. Use automated testing to exercise happy paths and capture test artifacts
2. Use captured test artifacts to supercharge your documentation

```image testingisdocumenting.png {scale: 0.5} 
840,600
1680,1400
```
```

Note: Hover over image annotations to display automatic tooltip.   
Hover over an item text to highlight the annotation on the image.

- Use automated testing to exercise happy paths and capture test artifacts
- Use captured test artifacts to supercharge your documentation


## Pixel Ratio

Use `pixelRatio` to display HiDPI images and use logical coordinates for the annotations

```
```image testingisdocumenting.png {pixelRatio: 2} 
420,300
840,700
```
```


## Rectangles And Arrows

Use `rect` and `arrow` as first column value to render arrow or rectangle annotation

```
```image testingisdocumenting.png {pixelRatio: 2} 
rect,60,110,420,430
arrow,485,810,310,474
```
```

Add a text block after coordinates to provide tooltip data. Markdown is supported.

```
```image testingisdocumenting.png {pixelRatio: 2} 
rect,60,110,420,430,Note: zone description
arrow,485,810,310,474,destination **description**
```
```


Note: Hover over image annotations to display automatic tooltip.

## Annotations File

```
:include-image: testingisdocumenting.png {
  annotationsPath: "testingisdocumenting.csv",
  pixelRatio: 2,
}
```



`include-image` also supports `JSON` file format


## Annotations Path Shortcut

You don't need to specify annotations path, if annotations file matches file name and path of the image and has `json` or `csv` extension.

Add `annotate: true` to automatically use matching annotations file

```
:include-image: testingisdocumenting.png {
  annotate: true,
  pixelRatio: 2,
}
```

## Integration With Testing

Use UI testing frameworks to automatically generate annotations file and capture screenshot.

For example [WebTau]() automatically generates an annotations file in addition to capturing a screenshot.


```
:include-image: doc-artifacts/duckduckgo-search.png {annotate: true}
```

- Type question you want to be answered anonymously
- Scan through results and pick the most relevant one



Note: [WebTau]() captures additional data such as `pixelRatio`

## Presentation Mode

Annotated images automatically participate in presentation mode. Annotations will appear one by one.



# Visuals -> Cards

## Image And Title

Use `card` fenced block plugin to render a card.

```markdown
```card books.jpg {title: "My Card"}
Markdown content of the card goes here
* item one
* item two
* item three
```
```


Note: Card scales down large image to fit

## Image Height And Background

When you use icon like images, e.g. SVGs, then they will take all the horizontal available space, and it may not be ideal.

Use `imageHeight` to force image height. Use `imageBackground` to specify a [background color/gradient]().

```markdown
```card diamond.svg {title: "My Card", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"}
Markdown content of the card goes here
* item one
* item two
* item three
```
```


## Multiple Columns

Use [Colums]() to arrange cards side by side


```markdown
```````columns
left:
```card diamond.svg {title: "Card Title", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"}
Markdown content goes here

:include-file: snippets/file-name.js 
```

middle:
```card small-book.png {title: "Book", imageHeight: 120}
Markdown content of the card goes here
* item one
* item two
* item three
```

right:
`````card star.svg {title: "API for the Win", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(154 128 145 / 0%), rgb(255 206 206))"}
Easy to use API
```api-parameters
firstName, String, description with *markdown* support
score, Integer, another description line with *markdown* support
```
`````
````````
```

Note: Card plugin is designed to work with [code snippets](), [Tables]() and [API Parameters]() by reducing spacing and integrating borders


## Links

Card plugin automatically converts links at the end of the fenced block content into dedicated card links.


```markdown
```card diamond.svg {title: "Card Title", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"}
Markdown content goes here

:include-file: snippets/file-name.js 

[Learn More](snippets/external-code-snippets)
```
```



# Visuals -> Charts

## Pie

To build a pie chart use:

```
:include-piechart: charts/genres.csv
```



## Bar

To build a bar chart use:

```
:include-barchart: charts/genres.csv
```



Add more columns to CSV data to use multiple bars per X axis tick

```
:include-barchart: charts/game-activities.csv
```



Use `stack: true` to render multiple bars stacked

```
:include-barchart: charts/game-activities.csv {stack: true}
```


Use `horizontal: true` and `height` parameter to change render direction

```
:include-barchart: charts/game-activities.csv {stack: true, horizontal: true, height: 250}
```


## Line

To build a line chart use:

```
:include-linechart: charts/genres.csv
```



Use multiple CSV columns to add more lines

```
:include-linechart: charts/daily-genres.csv
```



Use numbers in first column to have a regular X, Y plots

```
:include-linechart: charts/competitors.csv
```



## Time Series

Use `time: true` to treat `X` as time series


```
:include-linechart: charts/time-series.csv {time: true}
```

## Legend

Use `legend: true` to add legend to a chart

```
:include-linechart: charts/daily-genres.csv {legend: true}
```


## Wide Mode

Use `wide: true` to use available horizontal space

```
:include-linechart: charts/daily-genres.csv {wide: true}
```


Use in combination with height to fit larger charts

```
:include-linechart: charts/daily-genres.csv {wide: true, height: 800}
```


## Inlined Data

Use fence block plugin to inline chart data into markdown

```
```piechart
genre, preference
RPG, 75
Action, 50
RTS, 40
FPS, 50
```
```


```
```linechart {legend: true}
day, RPG, RTS, FPS
Monday, 100, 10, 0
Tuesday, 50, 50, 20
Wednesday, 10, 30, 50
Thursday, 5, 5, 100
Friday, 0, 100, 10
```
```


```
```barchart
genre, preference
RPG, 75
Action, 50
RTS, 40
FPS, 50
```
```


## Filtering columns

You can filter for specific columns from a CSV input by using the `columns` parameter.

```
```barchart {columns: ["genre", "rating"]}
genre, preference, rating
RPG, 75, 8
Action, 50, 9
RTS, 40, 1
FPS, 50, 1
```
```


## Presentation

Charts automatically participate in slides. Each chart becomes an individual slide.

Use `breakpoint` to add extra slides transitions.

```
:include-linechart: charts/competitors.csv {
  legend: true,
  breakpoint: [17, 42]
}
```


To try it, press on  icon next to the **Presentation** header

```
:include-piechart: charts/genres.csv {breakpoint: "Action"}
```


Use `all` as breakpoint value to create a slide for each textual entry

```
:include-barchart: charts/genres.csv {
  legend: true,
  breakpoint: "all"
}
```


## ECharts

`Znai` uses the beautiful and functional [EChart]() library to render charts.



# Visuals -> Mermaid Diagrams

## Fenced Block

Use [Mermaid]() to create diagrams using text and code, written in a Markdown style. Surround Mermaid expressions with a fenced block and specify `mermaid` as a language

```
```mermaid
flowchart TD
    A[Start] --> B{Is it?}
    B -- Yes --> C[OK]
    C --> D[Rethink]
    D --> B
    B -- No ----> E[End]
```
```

The result will be a diagram.


In presentation mode, rendered expressions will automatically scale to make use of the screen space.

Note: Rendering is done by using [Mermaid]() library.

## External File

Use include plugin to render a Mermaid diagram from a file.

```
:include-mermaid: mermaid/class-diagram.mmd
```



## Wide Mode

Use `wide: true` to use as much horizontal space as required and available.

```
```mermaid {wide: true}
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Go help John
    and Alice to John
        Alice->>John: I want this done today
        par John to Charlie
            John->>Charlie: Can we do this today?
        and John to Diana
            John->>Diana: Can you help us today?
    and Alice to Carl
        Alice->>Carl: I also want this done today
    end
end
```
```

or

```
:include-mermaid: mermaid/sequence-diagram.mmd { wide: true }
```




# Visuals -> SVG

## Retina Displays

To have crisp documentation images on high DPI displays use `SVG` images.

```
:include-svg: with-groups.svg
```


## Ids To Reveal

If you have `groups` that you want to display while hiding everything else, pass the IDs to the `idsToReveal` property.

```
:include-svg: with-groups.svg {idsToReveal: ["partA", "partB"]}
```


In presentation mode, groups will be displayed one at a time in the order specified.

To force all specified parts to appear at once add this before (either in the same section, or at the start of a document).

```
:include-meta: {allAtOnce: true}
```

This SVG image is taken and modified from [https://www.shareicon.net/pyramid-piramid-draw-stock-877888]()


## Actual Size

SVGs may have additional white space around the content and have width and height property specified inside. Use `actualSize: true` if you want to use the actual content only and effectively crop the white space. `width` and `height` will be overridden with the cropped size.

```
:include-svg: with-groups.svg {idsToReveal: ["partC"], actualSize: true}
```


Without `actualSize` there would be a gap created by hiding other parts.

## Scale

Use `scale: scaleFactor` to change the size of the SVG provided

```
:include-svg: with-groups.svg {idsToReveal: ["partC"], actualSize: true, scale: 0.2}
```




# Visuals -> Icons

## Feather Icons

Znai has integration with [Feather Icons](). Icons can be included using the *inlined code plugin*.

```
`:icon: cloud`
```

The result will appear in-lined in the current text 

Head over to [https://feathericons.com/]() to find the icon id.

## Bullet Points

Icons can also be used as bullet points replacement:

```
* `:icon: time` Time is important
* `:icon: settings` Setup must be easy
```

-  Time is important
-  Setup must be easy

## Colors

### Stroke

Use `stroke` parameter to set outline color.

```
* `:icon: time {stroke: 'green'}` stroke: `green`
* `:icon: cloud {stroke: 'blue'}` stroke: `blue`
* `:icon: settings {stroke: 'yellow'}` stroke: `yellow`
* `:icon: x-octagon {stroke: 'red'}` stroke: `red`
```

-  stroke: `green`
-  stroke: `blue`
-  stroke: `yellow`
-  stroke: `red`

### Fill

Use `stroke` parameter to set fill color.

-  fill: `red`
-  fill: `red`, stroke: 'black'

Note: default stroke color is a text color, which may not look good in Dark theme. Use `black` color explicitly if you want the stroke color to be black in both Light and Dark themes.

## Inside Tables

Znai provides a shortcut to use icons inside [Tables]().



```
:include-table: table.csv {mappingPath: "mapping.csv"}
```




# Visuals -> Headings

## Heading Types

Use `{style: "api"}` at the end of heading title to change style of the heading to `API` one: monospace and different subheading styles.

Use it to hand-craft reference documentation

```
# Heading API Type {style: "api", badge: "class"}
## Heading API Type {style: "api"}
### Heading API Type {style: "api"}
#### Heading API Type {style: "api"}
##### Heading API Type {style: "api"}
###### Heading API Type {style: "api"}
```

## Heading API Type

### Heading API Type

#### Heading API Type

##### Heading API Type

###### Heading API Type

####### Heading API Type



# Visuals -> Text Badge

## Part Of Text

Use `badge` inlined code plugin to render a badge like this 

```
to render a badge like this `:badge: v3.12`
```

## Part Of Heading

To add a badge to a header use

```
# Part Of Heading {badge: "v3.12"}
```



# Visuals -> Read More

## Collapsible Content

To collapse content use `readmore` fence plugin

```
````readmore {title: "Title of the Hidden Details"}
Information you don't want users to see right away goes here.
Can use all the markdown inside
1. item A
2. item B
    
```
let list = [1, 2, 3]
let value = 0
```
````
```


Note: Four backticks were used instead of the usual three. This is done so one fence block can include another block (code snippet) without confusion. It can be any number of backticks greater than three.



# Visuals -> Spoilers

## Hidden Content

To hide content use the `spoiler` fence plugin

```
````spoiler 
Information you don't want users to see right away goes here.
Can use all the markdown inside
1. item A
2. item B
    
```
let list = [1, 2, 3]
let value = 0
```
````
```


Note: Four backticks were used instead of the usual three. This is done so one fence block can include another block (code snippet) without confusion. It can be any number of backticks greater than three.

## Hidden Content Title

Use the `title` parameter to set a custom title for your spoiler.

```
```spoiler {title: "Are you ready to see what's inside?"}
...
```
```




# Visuals -> Keyboard Shortcuts

## Inlined Keyboard Shorcuts

Keyboard shortcuts can be included using the *inlined code plugin*.

```
To open a configuration screen press `:kbd: F4`.
```

To open a configuration screen press .

## Multiple Keys

To provide multiple keys, simply separate them with a space.

```
`:kbd: Alt Ctrl F7`
```




# Visuals -> Smart Bullet Points

## Types

Bullet points are an essential tool in the presentation of information. Frequent use of bullet points however may make documentation and presentation boring.

You can change the way bullet points are rendered by using the `meta` plugin.

```
:include-meta: {bulletListType: "BulletsListType"}

* Testing
* Design
* Code Review
* Documentation
```

## Left Right Timeline

Use `LeftRightTimeLine` to outline your flow. This also splits related things by moving odd points to the left and even to the right.

```
:include-meta: {bulletListType: "LeftRightTimeLine"}

* Testing
* Design
* Code Review
* Documentation
```


- Testing
- Design
- Code Review
- Documentation

## Venn

Use `Venn` to display overlapping relationships.


- Velocity
- Volume
- Variety

## Steps

Use `Steps` to outline a procedure.


- Install IDEA
- Learn Java
- Learn Machine Learning

Use `differentColors: true` to use distinct colors for each step

```
:include-meta: {bulletListType: "Steps", differentColors: true}
```


- Install IDEA
- Learn Java
- Learn Machine Learning

Use `align: "left"` to align steps to the left

```
:include-meta: {bulletListType: "Steps", differentColors: true, align: "left"}
```


- Install IDEA
- Learn Java
- Learn Machine Learning

## Presentation Only

If you want to change bullets type only for presentation use:

```
:include-meta: {presentationBulletListType: "BulletsListType"}
```

## Horizontal Stripes

The following bullet points will be rendered as horizontal striped, but only in presentation mode.

```
:include-meta: {presentationBulletListType: "HorizontalStripes"}
```


- Lessons Learned
- Future Plans
- Backup Strategy



# Visuals -> Flow Diagrams

## Nodes and Edges


Specify a `JSON` file to define a flow chart.


At the minimum `edges` must be provided.

```
:include-flow-chart: simple-dag.json
```

## Multiline Labels

Use `\n` to split your label into multiple lines.



## Nodes Size

Add `config` section to specify a common size for all the nodes



Note: Size unit is not based on pixels. It is sized in inches (assuming correct DPI). It is the size units used by [Graphviz]())

Use `width` and `height` property on a node itself to control individual nodes size:



## Highlight


Use `highlight` to highlight a node.


Or use `highlight` property of a `flow-chart` include plugin.

```
:include-flow-chart: simple-dag.json {highlight: "n3"}
```


Note: To highlight more than one element use `{highlight: ["n3", "n4"]}`

## Color Groups

Use `colorGroup` to assign a color group to a node. There are four color groups out of the box: `a` (default), `b`, `c`, `d`.



## Shapes

Use `shape` to assign one of the predefined shapes.



## Legend

Use `include-diagram-legend` to add a legend to your diagram. Optionally add `clickableNodes: true` to insert a message that the nodes are clickable (in case you use urls).

```
:include-diagram-legend: {a: "inputs", b: "optimization process", c: "outcome", d: "unknown",
    clickableNodes: true}

:include-flow-chart: flow-diagrams/simple-dag-colors.json
```



## Presentation

In presentation mode nodes will be highlighted one at a time.

To force all highlights to appear at once add this before (either in the same section, or at the start of a document).

```
:include-meta: {allAtOnce: true}
```

## Vertical Layout

To switch layout from horizontal to vertical use `vertical: true`.


## Layout Types

Use `layout` to specify a different underlying layout engine. Only `dot` (default) and `neato` is supported at the moment.

```
:include-flow-chart: simple-dag.json {layout: "neato"}
```


[Neato layout guide from Graphviz]()

## Links

To attach links to nodes use `url` property.


Combine links and highlights to create a sub navigation for your product.


## Reusable Nodes

Move node definitions to a one or more separate files if you use them across multiple diagrams.





```
:include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: "nodes/set-a.json"}
```


```
:include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: ["nodes/set-a.json", "nodes/set-b.json"]}
```




# Visuals -> Graphviz Diagrams

## Fenced Block

Surround [Graphviz]() expression with `graphviz` fenced block to render diagrams

```
```graphviz
digraph {
 a -> b;
 b -> c;
 d -> b;
 b -> e;
}
```
```


## Alignment

Use `align` parameter to change diagram alignment:

```markdown
```graphviz {align: "center"}
digraph {
 a -> b;
...
```


## External File

Use include plugin to render a diagram from a file

```
:include-graphviz: graphviz.dot {align: "center"}
```



## Setup Requirements

Znai renders [Graphviz]() diagrams at documentation build time. For it to work `dot` executable must be present in `PATH` during documentation generation process.

To override use `-Ddot.bin` Java system property to specify an alternative location.



# Visuals -> PlantUml

[PlantUml]() is a text-based way of drawing many kinds of diagrams.

## In Place


## External File

If your diagram is stored in a separate file, use

```
:include-plantuml: <path>
```


## Gantt Example





# Visuals -> Iframe

## Embedding Supporting Content

Use `include-iframe` plugin to embed HTML content that supports your documentation. Some examples:

- generated React JS index.html with components that get rendered based on url anchor
- custom plot functions

```markdown
:include-iframe: iframe/custom.html {
  fit: true
}
```


Note: Use `fit` parameter to automatically set the height of the iframe to fit its content



## Properties Override

Use `light` and `dark` to override CSS properties inside iframe content for light and dark modes respectively. Switch mode now to see the effect.

```markdown
:include-iframe: iframe/custom.html {
  fit: true,
  light: { "--color": "#333", "--backgroundColor": "#eee" },
  dark: { "--color": "#eee", "--backgroundColor": "#333" },
}
```


## Title

Use `title` parameter to display title bar on top of the embedded content:

```markdown
:include-iframe: iframe/custom.html {
  title: "rendered example",
  light: { "--color": "#333", "--backgroundColor": "#eee" },
  dark: { "--color": "#eee", "--backgroundColor": "#333" },
  fit: true
}
```


## Height

Use `height` to force container height. Use `maxHeight` to limit the automatically calculated height.


## Embedding Video

Use `include-iframe` to embed media from other places. By default, aspect ratio is set to `16:9`.

```
:include-iframe: https://www.youtube.com/embed/tgbNymZ7vqY
```


## Aspect Ratio

Use `aspectRatio` to change aspect ratio of the embedded content

```
:include-iframe: https://www.youtube.com/embed/tgbNymZ7vqY {aspectRatio: "4:3"}
```




# Visuals -> Asciinema

## Asciinema Player

To embedd [Acsiinema Player]() use:

```markdown
:include-asciinema: asciinema/intro.cast {startAt: "0:5", poster:"npt:0:5"}
```




# Layout -> Tabs

## Primary Use Case

Imagine your product supports multiple ways of achieving a final result:

- REST
- Web
- CLI
- Java
- Python
- more...

You can use tabs to allow your user to choose the method to accomplish the goal covered in the documentation. Tab selections will persist for users and provide streamlined experience.

Don't: use tabs as navigation experience. If your user needs both `Java` and `Python` executed one by one you need to show steps one after the other in proper order.

## Definition

To define multiple tabs we use fenced code block:

```
```tabs
JavaScript: :include-file: snippets/file-name.js
Java: :include-file: snippets/WideCode.java
Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true}
```
```

This will generate a multi-tab widget with `include-` plugin content for each tab.


Selecting a tab will switch all the tabs on every page.

## Markdown Per Tab

Any valid Markdown can be used in place of `include-` content.

A typical use case for *installation instructions* might be dividing content per language or environment:

```
````tabs
JavaScript: 
First you need to download WebStorm and then run the following using your terminal

```bash
$ yarn install
$ yarn start
```
    
Java: 
First you need to download Intellij IDEA and then run the following using your terminal
    
```bash
$ mvn install
$ mvn exec:exec
```
    
Cpp: 
First you need to download CLion and then run the following using your terminal

```bash
$ pwd
$ whoamis
```
````
```


## Separate Markdown Files

Consider extracting content to separate markup files if content becomes long. Use the `include-markdown` plugin to include external content.

```
```tabs
JavaScript: :include-markdown: instructions/javascript-install.md
Java: :include-markdown: instructions/java-install.md
Cpp: :include-markdown: instructions/cpp-install.md
```
```

Each tab will display inlined markdown from specified files.


## Default Tab

Use `default: "tab name"` to set which tab will be initially active. First Tab is active otherwise.


## Attention Signs

Use extra space(s) in front of `Note:` or other attention sign keywords to put attention signs inside a tab. Remember if you put 4+ spaces, your paragraph will become a code snippet.

```
````tabs
JavaScript: 

```bash
$ yarn install
$ yarn start
```

 Avoid: committing node_modules
    
Java: 
First you need to download Intellij IDEA and then run the following using your terminal
    
```bash
$ mvn install
$ mvn exec:exec
```
    
 Warning: `mvn` install for the first time may take considerable amount of time

Cpp: 
First you need to download CLion and then run the following using your terminal

```bash
$ pwd
$ whoamis
```

 Question: is C++ awesome or what?
````
```




# Layout -> Tables

## CSV

Instead of aligning tables using one of the standard Markdown extensions, you can use your `CSV` editor of choice.

```
:include-table: table.csv 
```

In this way, the following `CSV` file...


...will render like so:


## JSON

This extension can be used to display data from a `JSON` file representing tabular data.

```
:include-table: table.json 
```

So the following `JSON` file...


...will render like so:


## Title

Use `title` parameter to set a table title.

```
:include-table: table.json {title: "Monthly Report"}
```


## Anchor

When you specify a title, hover mouse over it to see a clickable anchor.

Use `anchorId` to override auto generated identifier.

```
:include-table: table/table.json {title: "Monthly Report", anchorId: "my-super-table"}
```


## Collapse

Use `collapsed: true|false` to make image collapsible. Note: `title` option is required

```markdown
:include-table: table/table.json {
  title: "Monthly Report",
  collapsed: true
}
```


## No Gap

Use `noGap: true` to remove top/bottom margins when there are multiple tables in a row.

```markdown
:include-table: table/table.json {
  title: "Monthly Report",
  collapsed: true,
  noGap: true
}

:include-table: table/table.json {
  title: "Weekly Report",
  collapsed: false
}
```



## Highlight

Use `highlightRow` to highlight a row, or a set of rows by their index

```
:include-table: table/table.json {title: "Highlight multiple rows", highlightRow: [0, 2]}
```


```
:include-table: table/table.json {title: "Highlight single row", highlightRow: 1}
```


## Arrange and Remove Columns

To change the order of columns or to filter out certain columns, specify the `columns` parameter.

```
:include-table: table.csv {columns: ["Description", "Price"]}
```


## Filter Rows

Use  to include only rows that match a regular expression

```
:include-table: table/table.csv {includeRowsRegexp: ["table", "cha.."]}
```


Use  to exclude rows that match a regular expression

```
:include-table: table/table.csv {includeRowsRegexp: ["table", "cha.."], excludeRowsRegexp: "short"}
```


## Width

By default, columns width is auto-calculated to fit the values inside. Use `width` to control the width of a column.

```
:include-table: table.csv {Price: {width: 200}, "Description": {width: 400}}
```


Use percentage value to change column size relative to the page content width.

```
:include-table: table/table.csv {Price: {width: "50%"}, "Description": {width: "30%"}}
```


Note: total percentage of all columns can go above 100%, in which case a scroll bar will be used to fit the content

```
:include-table: table/table.csv {Price: {width: "50%"}, "Description": {width: "60%"}}
```


## Column Names Conflict

Use `_` prefix if a column name matches the plugin parameter name like `title` when setting column specific parameters.

```
:include-table: table/table-conflict.csv {"_title": {width: "80%"}}
```


## Min Width

Use `minColumnWidth` to set min width for all table columns

```
:include-table: table/table.csv {minColumnWidth: 400, "Description": {width: 500}}
```


## Wide Mode

Use `wide: true` to make table occupy all available width

```
:include-table: table/table.csv {wide: true, minColumnWidth: 400, title: "My Items"}
```


## Text Alignment

Use `align` to change a column text alignment.

```
:include-table: table.csv {Price: {width: 200, align: "right"}}
```


`JSON` data example:

```
:include-table: table.json {Price: {width: 100, align: "right"}}
```


## Mapping

Use `mappingPath` to provide a way to override table values using mapping table.



```
:include-table: table.csv {mappingPath: "mapping.csv"}
```


Note: We used [Icons]() in this example, but you can use any plugins or any text you want.

## Inlined

```
```table {title: "my table", Price: {width: 100, align: "right"}}
Account, Price, Description
#12BGD3, 100, custom table with a long attachment
#12BGD3, 150, chair
#91AGB1, 10, lunch
```
```


## Multiline Content

Use quotes to provide multi line markdown content such as bullet points and code snippets



## Markdown in Cells

You can use Markdown table syntax within your table file.



## Github Flavored Table

```
| Github        | Flavored      | Table |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
```

| Github | Flavored | Table |
| --- | --- | --- |
| [{text=col 3 is, type=SimpleText}] | [{text=right-aligned, type=SimpleText}] | [{text=$1600, type=SimpleText}] |
| [{text=col 2 is, type=SimpleText}] | [{text=centered, type=SimpleText}] | [{text=$12, type=SimpleText}] |



# Layout -> Columns

## Information Layout

Use `columns` plugin to render content in two columns:

- Before-and-after transition
- Action and its result
- Input and output
- Result comparison

## Two Columns

To define two columns layout use fenced code block and `left:` and `right:` labels

```markdown
```columns
left: 
this content goes to the left

and can span multiple lines

right: 
this content goes to the right
and can span multiple lines
```
```


## Three Columns

To define three columns layout use fenced code block and `left:`, `middle:` and `right:` labels

```markdown
```columns
left: 
### Pros {style: "api"}
* Item One

middle: 
### Undecided {style: "api"}
* Item Two
* Item Three

right:
### Cons {style: "api"}
* Item Four
```
```


## Sizes

Size can be specified for a column as a `portion`. By default, both portions are assigned a value of `10`. If you specify right column `portion` to be `5`, then left will be left as `10` by default, leaving right side to be roughly 33% in size.


```
```columns {right: {portion: 5}}
left: 
:include-groovy: org/testingisdocumenting/testing/examples/restapi/WebTauRestAPIGroovyTest.groovy {
  title: "WebTau REST API test example",
  entry: "weather",
  bodyOnly: true
}

right:
:include-json: weather-example/response.json {
  title: "weather response example",
  highlightValueFile: "weather-example/paths.json"
}
```
```

## Border

Use `border` to add a border separator between columns


```
```columns {border: true}
left: 
**Before**

Hello World

right:
**After**

World Of Hellos
```
```

## Alignment

Use `align` to change a column content alignment.


```
```columns {border: true, left: {align: "right"}}
left: 
**Before**

Hello World

right:
**After**

World Of Hellos
```
```

## Presentation Mode

In Presentation Mode each column content will appear on slide transition



# Layout -> Templates

## Re-usable patterns

Let's consider a chat REST API example where we want to display a sample input, example code snippet, and sample output. Here how documentation may look like.

Use   to send a new message



This is the source to render the layout above

```
:include-groovy: org/testingisdocumenting/testing/examples/restapi/WebTauRestAPIGroovyTest.groovy {
  title: "POST messages",
  entry: "postMessages",
  bodyOnly: true,
  excludeRegexp: "http.doc"
}

```columns
left:
:include-json: chat-post-messages/request.json {
  title: "POST /messages request"
}
  
right:
:include-json: chat-post-messages/response.json {
  title: "POST /messages response",
  highlightValueFile: "chat-post-messages/paths.json"
}
```
```

Note: request and response were automatically captured using [WebTau]() testing framework.

We need to document other methods as well, and as you can imagine, the repetition will take place.

## Extract A Pattern

Let's move a block we plan to repeat into a separate file and replace hardcoding of entries like **post** with placeholders. Znai uses the [FreeMarker]() template engine.


## Use A Pattern

```
:include-template: templates/messages-http-call.md {method: "put"}
```




# Layout -> Two Sides Pages

## Setup

To enable two-sided layout as seen on this page, add the following at the beginning of a Markdown file:

```markdown
---
type: two-sides
---
```

## Details Side

Use the right pane to display additional details. It could be a REST response or a code snippet.

Use `include-meta` in front of some content to place it on the right side of the page. All the following content will go to the right side. At the start of a new section it will be reset.

```markdown
:include-open-api: snippets/open-api/uber.json {method: "get", path: "/v1/estimates/time"}
:include-meta: {rightSide: true}
:include-json: two-sides/price-estimate.json
```

## Open API Example

### Responses

##### 200

##### default





## Single Data Block Shortcut



Use `rightSide: true` as a parameter to `include-` plugins to move result to the right side.


## Aligning Data in Columns

Use an `include-empty-block` to align code snippets or other data block on both sides when there is an extra text on either side.





Table and code snippets above are aligned by using an empty block on the right side.

```markdown
:include-empty-block: {rightSide: true}

:include-table: layout/table/table.csv
:include-file: layout/table/table.csv {rightSide: true}
```



# Layout -> Two Sides Tabs

## Unified Tabs

In two sides layout tabs selection is moved to a single place (default is top right panel).

## Definition

To define multiple tabs we use fenced code block

```
```tabs
JavaScript: :include-file: snippets/file-name.js
Java: :include-file: snippets/WideCode.java 
Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true}
```
```

This will generate a multi-tab widget with an include plugin content per tab.

Note: Selecting a tab will switch all the tabs on every page.



## Markdown Per Tab

Any valid Markdown can be used as the content of each tab. Typical use case for *installation instructions*: extract differences per language or environment

```
````tabs
JavaScript: 
First you need to download WebStorm and then run the following using your terminal

```bash
$ yarn install
$ yarn start
```
    
Java: 
First you need to download Intellij IDEA and then run the following using your terminal
    
```bash
$ mvn install
$ mvn exec:exec
```
    
Cpp: 
First you need to download CLion and then run the following using your terminal

```bash
$ pwd
$ whoamis
```
````
```





# Layout -> Jupyter Notebook Two Sides

## Code First

[The include-jupyter extension]() automatically assigns `{meta: {rightSide: true}}` to output cells. If page `type` is set to `two-sides` you will get automatic split between code and output.

Note: Content below is included using `include-jupyter`


## Story First

Use `storyFirst` if you use a notebook with Markdown cells to tell a story. In this mode, code will be moved to the right side and a reader can focus on the story itself.

```
:include-jupyter: notebook.ipynb {storyFirst: true}
```

## Pandas

Displaying values using panda `display`

Values can be displayed using standard console output

Or using library to render a html snippet




# Python -> Content Extraction

## Content

Note: Function Content support requires running znai in an environment with Python 3.8 or later.

All the examples below are from the following example Python file:


Use `include-python` plugin to extract function, class or global variable content.

## Function

To show the full contents of a function:

```
:include-python: python/example.py {entry: "Animal.says"}
```


This also works for global functions:

```
:include-python: python/example.py {entry: "my_func"}
```


To show a function's body, without signature or doc string:

```
:include-python: python/example.py {entry: "Animal.says", bodyOnly: true}
```


This also works for global functions:

```
:include-python: python/example.py {entry: "my_func", bodyOnly: true}
```


## Title

Use the `title` property to specify an extracted snippet title.

```
:include-python: python/example.py {entry: "Animal.says", bodyOnly: true, title: "extracted snippet"}
```


## Anchor

Use `anchorId` to make a code snippet linkable. Hover mouse over title to see a clickable anchor.

```
:include-python: python/example.py {
  entry: "Animal.says", 
  bodyOnly: true,
  title: "extracted snippet",
  anchorId: "my-extracted-snippet"
}
```


## Variable

To show a variable's definition and assignment:

```
:include-python: python/example.py {entry: "my_var"}
```


To show only a variable's value:

```
:include-python: python/example.py {entry: "my_var", bodyOnly: true}
```


## Class

To show the full class definition:

```
:include-python: python/example.py {entry: "Animal"}
```


To show the contents of a class without the class declaration or doc string:

```
:include-python: python/example.py {entry: "Animal", bodyOnly: true}
```




# Python -> Description Extraction

## Doc String

Use `include-python-doc` plugin to embed py doc string with markdown into documentation. Znai uses [Pandas style doc string]() to parse description and parameters.


```
:include-python-doc: python/example.py {entry: "my_func"}
```


Note: Plugin ignores parameters block and only includes the description text. Check next section to see how to include parameters

```
:include-python-doc: python/example.py {entry: "Animal"}
```


```
:include-python-doc: python/example.py {entry: "Animal.says"}
```


## Doc Parameters

Use `include-python-doc-params` plugin to render parameters extracted from pydoc text


```
:include-python-doc-params: python/pydoc-params.py {entry: "my_func", title: "result and parameters"}
```


Note: read more about [API parameters]() for additional properties

## Type Hints

If you define [Type Hints](), you can omit types from PyDoc text and Znai will take the types from the signature


```
:include-python-doc-params: python/pydoc-params-type-hints.py {entry: "my_func", title: "result and parameters"}
```




# Python -> Auto Reference

## Method/Function Definition

Use `python-method` to include function/method definition with signature, documentation and parameters list

```
:include-python-method: fin.money.render_money
```



## Class Definition

To define a class use `python-class` include plugin

```
:include-python-class: fin.money.Money 
```


Note: Once you define `Money` class, method arguments and parameter descriptions with the same type will automatically link to the place of definition

#### Properties

#### Members

#### Details

##### dollars

##### __init__

##### add


## Inheritance

Example of inheritance



```
:include-python-class: executive_department.WorkerCTO
:include-python-class: department.Worker
```

Note: Base classes that are defined somewhere in the documentation will turn into links

**Base classes: **, 

#### Properties

#### WorkerCTO Members

#### Worker Members

#### Person Members

#### WorkerCTO Details

##### __init__

##### work_hard


**Base classes: **

#### Properties

#### Worker Members

#### Person Members

#### Worker Details

##### __init__

##### work




# CPP -> Doxygen Setup

## Doxygen

Znai parses generated [Doxygen]() XML files to extract and embed

- Comments
- Signatures
- Parameters

Use the building blocks to mix and match API documentation with visuals and other artifacts. Or use the built-in plugins to generate the whole blocks of API reference.

## Setup

Specify `index.xml` location inside `<docroot>/doxygen.json`


Note: To read doxygen XMLs from zip, add path to the zip to [lookup-paths]()



# CPP -> Description Extraction

## Members Comment Text

Use `include-doxygen-doc` to extract a function description


```
:include-doxygen-doc: utils::nested::my_func
```


Note: Plugin ignores parameters block and only includes the description text

## Member Args Selection

Use `args` param to pick an overload to use for comments extraction

```
:include-doxygen-doc: utils::nested::my_func { title: "My Params", args: "int" }
```


Note: Args are coma and spaces sensitive. Znai will print available args variants in case of mismatch for you to copy and paste.

## Classes Comment Text

To extract class top level comment, provide full class name


```
:include-doxygen-doc: utils::second::MyClass
```


## Extract Parameters

Use `include-doxygen-doc-params` to extract parameters description from doxygen comments

```
:include-doxygen-doc-params: utils::nested::my_func { title: "My Params" }
```


Use `small: true` option to make parameters smaller


## Extract Parameters By Args

Use `args` to select a specific overload by providing parameters string

```
:include-doxygen-doc-params: utils::nested::my_func { title: "My Params", args: "int" }
```


## Extract Template Parameters

Pass `type: "template"` parameter to `include-doxygen-doc-params` plugin to extract template parameters


```
:include-doxygen-doc-params: multi_println { title: "Template parameters", type: "template" }
```


## Ignore Template Parameters

Use `doc_ignore` as part of template parameter name to remove it from signature


```markdown
:include-doxygen-member: long_template_func {signatureOnly: true}
```


## Return Description

Return description is part of parameters list


```
:include-doxygen-doc-params: math::add
```




# CPP -> Auto Reference

## Member Signature, Comment And Parameters

Use `include-doxygen-member` to render member signature, its description and parameters list


```
:include-doxygen-member: utils::nested::my_func
```





```markdown
:include-doxygen-member: multi_println
```







## Member Signature Only

Use `signatureOnly: true` parameter to render only member signature


```
:include-doxygen-member: utils::second::ThirdClass::bark { signatureOnly: true }
```


## All Matching Signatures


```
:include-doxygen-member: utils::nested::their_func { signatureOnly: true, includeAllMatches: true }
```


## Specific Member By Args

Use `args` to select a specific overload by providing parameters string

```
:include-doxygen-member: utils::nested::their_func { args: "long, bool" }
```





Note: Args are coma and spaces sensitive. Znai will print available args variants in case of mismatch for you to copy and paste.

## Compound

Use `include-doxygen-compound` to render a definition of a class/struct

```
:include-doxygen-compound: utils::second::AnotherClass
```


#### Public Functions

#### Static Public Functions

#### Public Attributes

#### Static Public Attributes

#### Protected Functions

#### Definitions

##### sing





##### bark





##### smile





##### number_of_sounds



##### counter



##### help






## Cross-Reference

Znai uses doxygen cross-reference to link definitions together. Class above references `MyClass` in its parameters. After you include definition of that class, `MyClass` reference above becomes a link.

```
:include-doxygen-compound: utils::second::MyClass
```


#### Public Functions

#### Definitions

##### bark







# Java -> Content Extraction

## Method Body

When you need to extract a specific method body, use the `include-java` plugin.

Consider the file below:


You can specify a method name to extract its full definition, or display only its body.

```
:include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true}
```

If `bodyOnly` is specified, signature will be omitted.


## Callout Comments

Similar to how you [specify comments type]() for a regular file, you can specify `commentsType` option for `include-java`.

```
:include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true, commentsType: "inline"}
```


## Title

Use `title` property to specify extracted code snippet title

```
:include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true, title: "my snippet"}
```


## Anchor

Use `anchorId` to make a code snippet linkable. Hover mouse over title to see a clickable anchor.

```
:include-java: HelloWorld.java {
  entry: "sampleMethod",
  bodyOnly: true,
  title: "my snippet",
  anchorId: "my-java-snippet"
}
```


## Signature Only

You can also specify a method name and extract only its signature.

```
:include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true}
```

If `signatureOnly` is specified, body will be omitted.


Pass `entrySeparator: "<separator>"` to have a provided line in between entries as a separator.

```
:include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true, entrySeparator: "..."}
```


## Overloads

Specify types inside brackets to select an overloaded versions of your methods.

Types should appear as they are in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin.

```
:include-java: HelloWorld.java {entry: "sampleMethod(Map, int, boolean)"}
```

Note: Generic types are erased and spaces after commas are optional


## Type Body

To extract `class`, `interface` or `enum` body use:

```
:include-java: MyEnum.java {entry: "MyEnum"}
```


Use `bodyOnly` to only display body of your type.

```
:include-java: MyEnum.java {entry: "MyEnum", bodyOnly: true}
```


## Multiple Entries

To display multiple methods at once pass a list to `entry` parameter

```
:include-java: HelloWorld.java {entry: ["createData", "importantAction"]}
```

This will render:


List important methods signatures at one place by passing `signatureOnly: true`.

```
:include-java: HelloWorld.java {entry: ["createData", "importantAction"], signatureOnly: true}
```

This will render:


## Multiple Overloads

To list of the overloads of a method, specify method name using the `entry` parameter.

```
:include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true}
```


## Multiple Bodies

Pass multiple entries and `bodyOnly` to extract example of usage from unit tests


```
:include-java: HelloWorldTest.java {
  entry: ["exampleOfA", "exampleOfB"],
  bodyOnly: true,
  title: "example of actions"}
```


Pass `entrySeparator: "<separator>"` to have a provided line in between entries as a separator.

```markdown
:include-java: HelloWorldTest.java {
  entry: ["exampleOfA", "exampleOfB"],
  entrySeparator: "",
  bodyOnly: true,
  title: "example of actions"}
```




# Java -> Description Extraction

## Class Level

Documentation maintenance is one of the main goals of this documentation system. In the case of Java you may already use `JavaDoc` strings to explain certain concepts of your system.


Instead of copy-and-pasting text between sources, you can refer to it inside your documentation.

```
:include-java-doc: HelloWorld.java
```

*Text bellow is extracted from top class level `JavaDoc`*


## Method Level

Method level `JavaDoc` text can be referred to as well by specifying the `entry` parameter.

```
:include-java-doc: HelloWorld.java {entry: "sampleMethod"}
```

*Text bellow is extracted from `sampleMethod` method `JavaDoc`*


## Field Level

```
:include-java-doc: HelloWorld.java {entry: "numberOfStudents"}
```


## Inner Classes

Use `NestedName.entityName` to disambiguate a field or a method name


```
:include-java-doc: HelloWorldWithInner.java {entry: "Nested.importantScore"}
```


## Handling Links

Links defined with `{@link MyClass}` are automatically converted to [Inlined Code]() and become `MyClass`. To turn `MyClass` into a link you need to use [Code References]().

Use the `referencesPath` value to associate `{@link CustomDomain}` with the documentation link:



Alternatively you can define [Global References]() to turn `MyClass` into a link.

## Method Params

```
:include-java-doc-params: HelloWorld.java {entry: "sampleMethod"}
```


Use the `title` parameter to specify a title.

```
:include-java-doc-params: HelloWorld.java {entry: "importantAction", title: "Trading Required Parameters"}
```


## Method Params With References

Use the [Code References]() file to link method parameters to reference pages.

To do that, define references in a CSV file, using a two column format: `type-or-variable-name, link`.


```
:include-java-doc-params: HelloWorld.java {
    entry: "importantAction", 
    title: "Trading Required Parameters",
    referencesPath: "references/javadoc-references-demo.csv"}
```


Parameters are now linked with a reference section for the documentation.

## Enum Entries

Use `include-java-enum-entries` to enumerate entries of a enum from a file.


```
:include-java-enum-entries: MyEnum.java
```


You can exclude deprecated entries from the list by setting the `excludeDeprecated` parameter.

```
:include-java-enum-entries: MyEnum.java {excludeDeprecated: true}
```


Use the `title` parameter to specify a title.

```
:include-java-enum-entries: TransactionTypes.java {title: "Transaction Types"}
```


## Enum Entries With References

Use a [Code References]() file to link enum entries to reference pages.

To do that, define references in a CSV file, using a two column format: `enum-name, link`.



```
:include-java-enum-entries: TransactionTypes.java {
    title: "Transaction Types",
    referencesPath: "references/javadoc-references-demo.csv"
}
```


Enums are now linked with a reference section for the documentation.

Note: you can reuse the same CSV file for Enums, Parameters, Code Snippets. Alternatively, you can use [Global References]().

## Markdown

Pass `markdown: true` parameter to the plugins to treat JavaDoc content as markdown


```
:include-java-doc: HelloWorld.java {markdown: true}
```




# Java -> Auto Reference

## Coming Soon

Auto reference similar to [Python]() is planned for the future releases.

Create a [GitHub Issue]() or [Discussion]() to help prioritize



# Synergy With Testing -> Web UI

## Screenshots And Annotations

In [Image Annotations]() you can specify annotations in an external file.

Using a testing framework one can generate coordinates during a UI test based on elements' placement. Here is an example of using [WebTau]() testing framework to capture a screenshot and annotations


```markdown
1. Type question you want to be answered anonymously
2. Scan through results and pick the most relevant one

:include-image: doc-artifacts/duckduckgo-search.png {annotate: true}
```

- Type question you want to be answered anonymously
- Scan through results and pick the most relevant one





# Synergy With Testing -> REST API

## Request and Response Capture

[Open API]() helps to define a formal API specification. And real examples of request/response helps to clarify.

Instead of manually copy-and-pasting the responses to your documentation, consider running tests and automatically capturing the relevant artifacts.

## WebTau

[WebTau]() (short for web test automation) is a testing API, command line tool and a framework to write unit, integration and end-to-end tests. Test across REST-API, Graph QL, Browser, Database, CLI and Business Logic with consistent set of matchers and concepts.

Here is an example of REST API test with test artifacts capture


## Documentation Pipeline

Documentation pipeline can look like


```markdown
# Create Employee

:include-open-api: openapi/api-spec.json {operationId: "createEmployee" }

```columns
left: 
:include-json: doc-artifacts/employee-post/request.json { title: "request payload" }

right: 
:include-json: doc-artifacts/employee-post/response.json { 
  title: "response payload", 
  highlightValueFile: "doc-artifacts/employee-post/paths.json" 
}
```
```

## Create Employee

### Request

### Responses

##### 200

##### 201





# Synergy With Testing -> Business Logic

## Capture Input Example

Your business logic tests can greatly improve maintainability of your documentation. The example below tests what account types are allowed to perform *Trading Activities*.

Test is using [WebTau]() testing framework to define and capture test data.


As part of validation of account types, the test also captures data that was used for testing. We can refer to this data later in our documentation by using the [include-table]() plugin

```
:include-table: account-rules.json
```

Your test data and user-facing documentation is now linked.




# Plugins -> Plugin Types

`Znai` extends markdown with plugins system to supercharge visuals and maintainability. Three categories of plugins are available for usage and creation:

- [Include Plugins]()
- [Inlined Code]()
- [Fenced Block]()

## Include Plugins

To use include plugin write following on a new line

```
:include-<pluginId>: [text param] [{key1: value1, key2: value2}]
```

```markdown
:include-json: example.json {
  title: "JSON example",
  highlightValue: ["root.person.id"],
  collapsedPaths: ["root.details"]
}
```


```markdown
:include-java: ../java/HelloWorld.java {
  entry: "sampleMethod", 
  bodyOnly: true,
  commentsType: "inline"
}
```


## Inlined Code

To use inlined code write plugin id inside backticks (`) surrounded with (:)

```markdown
content `:<pluginId>: [text param] [{key1: value1, key2: value2}]`
```

```markdown
It is a `:icon: cloud` day, `:icon: clock` is ticking
```

It is a  day,  is ticking

## Fenced Block

To use fenced block plugin specify its ids after fenced block start

```markdown
```<pluginId> [text param] [{key1: value1, key2: value2}]
content
```
```

```markdown
```tabs
C++: 
    content of C++ tab
Java:
    content of Java tab
Python:
    content of Python tab
```
```




# Plugins -> Default Parameters

## Global Defaults

Create `plugin-params.json` file to specify default parameters per plugin.


When the parameters file is present, any time you use [API Parameters]() plugin without `title`, an implicit title will be present

## Page Local Defaults

Use page meta block at the start of a page to set plugin default parameters specific to the page.

You may have seen meta block example to set [Page Title]():

```
---
title: Custom Name
---
```

Now we're going to use the same block to add plugin defaults local to the page.


Once we have a block like this, every [include-image]() plugin on this page will have `border` set to true.

```markdown
:include-image: visuals/regular-image.png
```




# Plugins -> Development

## PlaceHolder

Please create [GitHub Issue]() if you are interested in plugins creation documentation.



# Configuration -> Basic

## Favicon

Put a `favicon.png` file inside the root of your docs (next to your `toc` file)



# Configuration -> Styling

Add `style.css` next to `toc` file to change look and feel of the resulting documentation website.

## CSS Variables

There are dozens of css variables you can target directly first, before considering more cascading options with class names. Use your browser inspector tool to see which ones are used.

For example, to change font sizes, use:

```css
:root {
    --znai-regular-text-size: 16px;
    --znai-smaller-text-size: 14px;
    --znai-code-text-size: 13px;
    --znai-code-font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
}
```

Note: consider only targeting variables and classes that starts with `znai-` prefix. Those are considered to be public API.

## Dark Light Themes Overrides

Example above targets both light and dark theme. If you want to target dark theme specifically, use:

```css
.theme-znai-dark {
    --znai-code-keyword-color: #5050af;
}
```



# Configuration -> Top Header

To enable Top Header navigation bar, add `useTopHeader` to `meta.json`:

```
"useTopHeader": true
```



# Deployment -> Additional Files

Znai automatically copies files like images to deploy location when you use them.

Create `upload.txt` next to `toc` file and list all the additional files/directories you want to be copied to the deployment location.

```txt
my-extra-files/fileone.xml
my-extra-dir
```



# Hub -> Introduction

Znai has a server mode that can act as a Hub for your company documentations. In addition to serving static content, Hub provides:

- Landing page, with all the documentations separated by sections
- On-demand upload via CLI
- Automatic build artifacts watching to grab the latest docs



# Hub -> Setup

## Config File

Create the enterprise config file and set the path where Znai will store uploaded documentation:


## Run In Server Mode

Run Znai in server mode in the directory with the config file:


## Upload Documentation

Set `ZNAI_SERVER_URL` environment variable to the full url of the server, e.g.:


Now you can run `upload` command to build and upload a documentation:




# Hub -> Build Artifacts Watch

## Todo

Please create [GitHub Issue]() if you are interested in automatically watching a set of directories for built documentations to automatically upload them to Hub.



# Example References -> Domain

This page is a dummy page to demo code reference capabilities from [Java Enums]() and [parameter types]()

## Trader

Trader reference placeholder

## Transaction

Transaction reference placeholder

### Buy

Transaction buy placeholder

### Sell

Transaction sell placeholder



# Example References -> Api

This page is a dummy page to demo [code reference]() capabilities

## Flight API

Flight API summary placeholder

## Book

Lower level explanation of `fapi.book`

## Query

Lower level explanation of `fapi.query`

## Useful Action

stub for useful action description



# Znai Development -> Local Build

## Clone Project


## Build Tools Setup

### SDK Man

Easy way to maintain Java specific dependencies below is by using [SDKMAN]()

### Java And Maven

You need Java 17 and Maven to build Znai.


### Graphviz

Diagram features depend on its presence of [dot]() when build generates documentation for Znai.

Use [brew]() to install [GraphViz]()


### Firefox

Some automated tests in znai are using [WebTau](), which in turn use Selenium WebDriver and firefox.

A firefox executable has to be on the system path.

Use [brew]() to install [Firefox]().


## Build


## Run Local Version




# Release Notes -> 2025

## 1.80


## 1.79


## 1.78.1


## 1.78


## 1.77


## 1.76


## 1.75


## 1.74




# Release Notes -> 2024

## 1.73


## 1.72


## 1.71


## 1.70


## 1.69


## 1.68


## 1.67




# Release Notes -> 2023

## 1.66


## 1.65


## 1.64


## 1.63




# Release Notes -> 2022

## 1.62


## 1.61.2


## 1.61.1


## 1.61


## 1.60


## 1.59.1


## 1.59


## 1.58


## 1.57


## 1.56




# Release Notes -> 2021

## 1.55


## 1.54


## 1.53


## 1.52


## 1.51


## 1.50


## 1.49

*No notes*

## 1.48

*No notes*

## 1.47

*No notes*

## 1.46

*No notes*



