const TestData = {

    graphvizColors: {
        a: {
            line: '#123752',
            fill: '#708EA4',
            text: '#eeeeee'
        },
        b: {
            line: '#AA8E39',
            fill: '#FFEAAA',
            text: '#806515',
            inversedText: '#FFEAAA'
        },
        c: {
            line: '#306E12',
            fill: "#519331",
            text: "#ABDD93"
        }
    },

    graphPresentation: {
        slides: [
            {
                ids: ['main', 'parse', 'main->parse'], "content": [
                    {
                        "type": "Paragraph",
                        "content": [
                            {
                                "text": "hello",
                                "type": "SimpleText",
                                "content": []
                            }
                        ]
                    }
                ]
            },
            {
                ids: ['listen'], "content": [
                    {
                        "type": "Paragraph",
                        "content": [
                            {
                                "text": "hello world",
                                "type": "SimpleText",
                                "content": []
                            }
                        ]
                    }
                ]
            }
        ]
    },

    svg: '<?xml version="1.0" encoding="UTF-8" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"> <!-- Generated by graphviz version 2.38.0 (20140413.2041)  --> <!-- Title: Simple Pages: 1 --> <svg width="188pt" height="191pt"  viewBox="0.00 0.00 188.00 191.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 187)"> <title>Simple</title> <polygon fill="white" stroke="none" points="-4,4 -4,-187 184,-187 184,4 -4,4"/> <!-- main --> <g id="node1" class="node"><title>main</title> <polygon fill="none" stroke="black" points="63,-146.5 63,-182.5 117,-182.5 117,-146.5 63,-146.5"/> <text text-anchor="middle" x="89.9966" y="-160.3" font-family="Times,serif" font-size="14.00">main [a]</text> </g> <!-- parse --> <g id="node2" class="node"><title>parse</title> <polygon fill="none" stroke="black" points="63,-73.5 63,-109.5 117,-109.5 117,-73.5 63,-73.5"/> <text text-anchor="middle" x="89.769" y="-87.3" font-family="Times,serif" font-size="14.00">parse</text> </g> <!-- main&#45;&gt;parse --> <g id="edge1" class="edge"><title>main&#45;&gt;parse</title> <path fill="none" stroke="black" d="M90,-146.455C90,-146.455 90,-119.59 90,-119.59"/> <polygon fill="black" stroke="black" points="93.5001,-119.59 90,-109.59 86.5001,-119.59 93.5001,-119.59"/> </g> <!-- listen --> <g id="node3" class="node"><title>listen</title> <polygon fill="none" stroke="black" points="0,-0.5 0,-36.5 54,-36.5 54,-0.5 0,-0.5"/> <text text-anchor="middle" x="26.6655" y="-14.3" font-family="Times,serif" font-size="14.00">listen</text> </g> <!-- parse&#45;&gt;listen --> <g id="edge2" class="edge"><title>parse&#45;&gt;listen</title> <path fill="none" stroke="black" d="M81,-73.4602C81,-50.0044 81,-12 81,-12 81,-12 64.3164,-12 64.3164,-12"/> <polygon fill="black" stroke="black" points="64.3164,-8.5001 54.3164,-12 64.3164,-15.5001 64.3164,-8.5001"/> </g> <!-- server --> <g id="node4" class="node"><title>server</title> <polygon fill="none" stroke="black" points="126,-0.5 126,-36.5 180,-36.5 180,-0.5 126,-0.5"/> <text text-anchor="middle" x="152.6" y="-14.3" font-family="Times,serif" font-size="14.00">server</text> </g> <!-- parse&#45;&gt;server --> <g id="edge3" class="edge"><title>parse&#45;&gt;server</title> <path fill="none" stroke="black" d="M99,-73.4112C99,-53.4169 99,-24 99,-24 99,-24 115.684,-24 115.684,-24"/> <polygon fill="black" stroke="black" points="115.684,-27.5001 125.684,-24 115.684,-20.5001 115.684,-27.5001"/> </g> </g> </svg> ',

    documentation:    {
        "docMeta": {
            "viewOn": {
                "link": "https://github.com/twosigma/TestingIsDocumenting/blob/master/td-documentation-cli/documentation",
                "title": "View On GitHub"
            },
            "id": "preview",
            "title": "MDoc",
            "type": "User Guide",
            "previewEnabled": true
        },
        "page": {
            "type": "Page",
            "content": [
                {
                    "title": "Existing File",
                    "id": "existing-file",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "To boost documentation maintainability you can refer text and code snippets from already existing files.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name.js\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Include-dash family is our custom extension to Markdown to support various scenarios.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "File will be looked up using following rules:",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "bulletMarker": "*",
                            "tight": true,
                            "type": "BulletList",
                            "content": [
                                {
                                    "type": "ListItem",
                                    "content": [
                                        {
                                            "type": "Paragraph",
                                            "content": [
                                                {
                                                    "text": "directory with a markup file",
                                                    "type": "SimpleText"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "ListItem",
                                    "content": [
                                        {
                                            "type": "Paragraph",
                                            "content": [
                                                {
                                                    "text": "root directory of a documentation",
                                                    "type": "SimpleText"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "ListItem",
                                    "content": [
                                        {
                                            "type": "Paragraph",
                                            "content": [
                                                {
                                                    "text": "all lookup paths listed in a special file",
                                                    "type": "SimpleText"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "Title",
                    "id": "title",
                    "type": "Section",
                    "content": [
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name.js {title: \"ES6 class\"} \n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Use ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "title",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " property to specify a title.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass",
                            "title": "ES6 class",
                            "type": "Snippet"
                        }
                    ]
                },
                {
                    "title": "Wide Code",
                    "id": "wide-code",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Use ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "wide",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " option to stretch wide code to occupy as much real estate as possible.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: WideCode.java {wide: true}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "lang": "java",
                            "snippet": "class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n}",
                            "wide": true,
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Without ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "wide",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " option code will be aligned with the rest of the text and users can use scrollbars.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "java",
                            "snippet": "class InternationalPriceService implements PriceService {\n    private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) {\n        ...\n    }\n}",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Note: Good placement of a ",
                                    "type": "SimpleText"
                                },
                                {
                                    "type": "Emphasis",
                                    "content": [
                                        {
                                            "text": "Wide Code",
                                            "type": "SimpleText"
                                        }
                                    ]
                                },
                                {
                                    "text": " is at the end of a page or a section to show the full version of a code sample.",
                                    "type": "SimpleText"
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "Read More",
                    "id": "read-more",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "If you have a file with large code snippet and you want to initially display only a small fraction use ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "readMore",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": "",
                                    "type": "SimpleText"
                                },
                                {
                                    "type": "SoftLineBreak"
                                },
                                {
                                    "text": "option with an ",
                                    "type": "SimpleText"
                                },
                                {
                                    "type": "StrongEmphasis",
                                    "content": [
                                        {
                                            "text": "optional",
                                            "type": "SimpleText"
                                        }
                                    ]
                                },
                                {
                                    "text": " ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "readMoreVisibleLines",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " option to specify a number of initial lines displayed (default is 8).",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: LongFile.java {readMore: true, readMoreVisibleLines: 3}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "lang": "java",
                            "snippet": "public class DocScaffolding {\n    private final Path workingDir;\n    private Map\u003cString, List\u003cString\u003e\u003e fileNameByDirName;\n\n    public DocScaffolding(Path workingDir) {\n        this.workingDir \u003d workingDir;\n        this.fileNameByDirName \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    public void create() {\n        createPages();\n        createToc();\n        createMeta();\n        createIndex();\n        createLookupPaths();\n    }\n\n    private void createLookupPaths() {\n        createFileFromResource(\"lookup-paths\");\n    }\n\n    private void createMeta() {\n        createFileFromResource(\"meta.json\");\n    }\n}",
                            "readMore": true,
                            "readMoreVisibleLines": 3.0,
                            "type": "Snippet"
                        }
                    ]
                },
                {
                    "title": "Highlights",
                    "id": "highlights",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Use ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "highlight",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " option to bring readers attention to the important lines.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name.js {highlight: \"export\"}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass",
                            "highlight": "export",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "It is recommended to pass a substring, but you can pass a line idx (starts from 0).",
                                    "type": "SimpleText"
                                },
                                {
                                    "type": "SoftLineBreak"
                                },
                                {
                                    "text": "Additionally you can combine two approaches and pass a list of things to highlight.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name.js {highlight: [\"export\", 1]}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() {\n    }\n}\n\nexport default JsClass",
                            "highlight": [
                                "export",
                                1.0
                            ],
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Note: Order of lines to highlight is reflected during presentation mode",
                                    "type": "SimpleText"
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "Callout Comments",
                    "id": "callout-comments",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "If you already have comments inside your code it would be non effecient to repeat them inside documentation.",
                                    "type": "SimpleText"
                                },
                                {
                                    "type": "SoftLineBreak"
                                },
                                {
                                    "text": "Instead comments can be automatically extracted and presented as part of the text",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Given file with inlined comments",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "By specifying ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "commentsType",
                                    "type": "InlinedCode"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name-with-comments.js {commentsType: \"inline\"}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "It will be rendered as",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules",
                            "commentsType": "inline",
                            "type": "Snippet"
                        }
                    ]
                },
                {
                    "title": "Spoilers",
                    "id": "spoilers",
                    "type": "Section",
                    "content": [
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Set ",
                                    "type": "SimpleText"
                                },
                                {
                                    "code": "spoiler",
                                    "type": "InlinedCode"
                                },
                                {
                                    "text": " property to initially hide explanations. It may be useful when teaching or class.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "",
                            "snippet": ":include-file: file-name-with-comments.js {commentsType: \"inline\", spoiler: true}\n",
                            "lineNumber": "",
                            "type": "Snippet"
                        },
                        {
                            "type": "Paragraph",
                            "content": [
                                {
                                    "text": "Click on the spoiler to reveal the explanations.",
                                    "type": "SimpleText"
                                }
                            ]
                        },
                        {
                            "lang": "javascript",
                            "snippet": "class JsClass {\n    constructor() { // new syntax for constructor\n    }\n}\n\nexport default JsClass // new syntax for ES6 modules",
                            "commentsType": "inline",
                            "spoiler": true,
                            "type": "Snippet"
                        }
                    ]
                }
            ],
            "lastModifiedTime": 1536355811000,
            "tocItem": {
                "sectionTitle": "Snippets",
                "pageTitle": "External Code Snippets",
                "pageMeta": {},
                "fileName": "external-code-snippets",
                "dirName": "snippets",
                "pageSectionIdTitles": [
                    {
                        "title": "Existing File",
                        "id": "existing-file"
                    },
                    {
                        "title": "Title",
                        "id": "title"
                    },
                    {
                        "title": "Wide Code",
                        "id": "wide-code"
                    },
                    {
                        "title": "Read More",
                        "id": "read-more"
                    },
                    {
                        "title": "Highlights",
                        "id": "highlights"
                    },
                    {
                        "title": "Callout Comments",
                        "id": "callout-comments"
                    },
                    {
                        "title": "Spoilers",
                        "id": "spoilers"
                    }
                ]
            }
        },
        "footer": {
            "type": "Footer",
            "content": [
                {
                    "columns": [
                        {
                            "content": [
                                {
                                    "type": "Paragraph",
                                    "content": [
                                        {
                                            "code": "mdoc",
                                            "type": "InlinedCode"
                                        },
                                        {
                                            "text": " is in private beta. if you see any issues, please create jira ticket ",
                                            "type": "SimpleText"
                                        },
                                        {
                                            "url": "https://jira/mdoc",
                                            "isFile": false,
                                            "type": "Link",
                                            "content": [
                                                {
                                                    "text": "jira/mdoc",
                                                    "type": "SimpleText"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "content": [
                                {
                                    "type": "Paragraph",
                                    "content": [
                                        {
                                            "text": "Currently ",
                                            "type": "SimpleText"
                                        },
                                        {
                                            "code": "mdoc",
                                            "type": "InlinedCode"
                                        },
                                        {
                                            "text": " is focusing its effort to provide a streamlined way to document products with UI, REST and command",
                                            "type": "SimpleText"
                                        },
                                        {
                                            "type": "SoftLineBreak"
                                        },
                                        {
                                            "text": "line interfaces.",
                                            "type": "SimpleText"
                                        }
                                    ]
                                },
                                {
                                    "type": "Paragraph",
                                    "content": [
                                        {
                                            "text": "If you want to sign for the beta, email to PPE-Support@twosigma.com",
                                            "type": "SimpleText"
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "config": {},
                    "type": "Columns"
                },
                {
                    "type": "Paragraph",
                    "content": [
                        {
                            "type": "Emphasis",
                            "content": [
                                {
                                    "text": "Copyright @ 2018 Two Sigma",
                                    "type": "SimpleText"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }};

export default TestData;